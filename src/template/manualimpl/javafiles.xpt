«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT servicegen»
«IMPORT servicedef»
«IMPORT typedef»
«IMPORT template::javavalidator»

«EXTENSION template::ServicegenExtensions»

«DEFINE svcflowDefinitionFile(ServiceDef sd, SOABEModel model) FOR Operation»
	«FILE svcflowConfDirForService(sd.codServizio, model)+"/"+svcflowDefinitionFileName(this,sd.codServizio)»<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE workflow PUBLIC "-//OpenSymphony Group//DTD OSWorkflow 2.8//EN" "http://www.opensymphony.com/osworkflow/workflow_2_8.dtd">
«PROTECT CSTART '<!--' CEND '-->' ID getRegionUID("svcflow"+model.codComponente+sd.codServizio+name)»
<!-- inserire qui la definizione del workflow (verra' preservata nelle successive
     generazioni). Ricordarsi di mantenere identificata con '0' la azione iniziale. -->
<workflow>
	<initial-actions>
		<action id="0" name="Start Workflow">
			<results>
				<unconditional-result id="5" old-status="Finished"
					status="Queued" step="1" />
			</results>
		</action>
	</initial-actions>
	<steps>
		<step name="Inizio" id="1">
		<actions>
			<action name="vaiInFondo" id="2">
				<results>
					<unconditional-result old-status="Queued"
						status="Finished" step="2">
					</unconditional-result>
				</results>
			</action>
		</actions>
		</step>
		<step name="Fine" id="2"></step>
	</steps>
</workflow>
«ENDPROTECT»
	«ENDFILE»
«ENDDEFINE»




«DEFINE javaEJBServiceBeanFile (SOABEModel model, ServiceImpl serviceImpl)FOR ServiceDef»
	«FILE fullServiceEJBClassesDir(codServizio, model)+"/"+serviceBeanClassName()+".java"»
package «getFullServiceEJBPkg(codServizio, model)»;

import it.csi.csi.wrapper.CSIException;
import it.csi.csi.wrapper.SystemException;
import it.csi.csi.wrapper.UnrecoverableException;
«IF this.types.types.select(t|t.metaType== Entity)!=null»
import «fullQualifiedEntitiesPkg(codServizio, model)».*;
«ENDIF»
import «fullQualifiedServiceInterfacePkg(model)».*;
«IF this.types.types.select(t|t.metaType== Exception)!=null»
import «fullQualifiedServiceExceptionPkg(codServizio, model)».*;
«ENDIF»
«IF (serviceImpl.implCartridge!=null && ((ManualImplCartridge)serviceImpl.implCartridge).useInjectedPojo) -»
import «getFullServiceEJBPkg(codServizio, model)».spring.SpringBeanLocator;
«ENDIF»

import java.rmi.RemoteException;

import javax.ejb.EJBException;
import javax.ejb.SessionBean;
import javax.ejb.SessionContext;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;
import org.apache.log4j.*;

/**
 * @generated
 */
public class «serviceBeanClassName()» implements SessionBean{

	// business delegate contenente le implementazioni del servizio
	/**
	 * @generated
	 */
	protected «serviceImplClassName()» delegate = null;
	
	/**
	 * @generated
	 */
	public static final String LOGGER_PREFIX = "«getLoggerPrefixForComponent(model.codProdotto, model.codComponente)»";
	public static final Logger logger = Logger.getLogger(LOGGER_PREFIX);
	
	/// Operazioni esposte dal servizio
	
	«EXPAND template::javafiles::operationDelegation (model,codServizio, this)FOREACH this.operations»
	
	«IF this.monitorable»
	/**
	 * @generated
	 */
	public boolean testResources()	«noSonarTag("EIAS")» 
	throws  it.csi.csi.wrapper.CSIException{ «noSonarTag("EIAS")» 
		return delegate.testResources();
	}
	«ENDIF»
	«IF this.diagEnabled»
	/**
	 * @generated
	 */
	public it.csi.coopdiag.api.InvocationNode selfCheck( «noSonarTag("EIAS")» 
	it.csi.coopdiag.api.CalledResource[] alreadyChecked ) «noSonarTag("EIAS")» 
	throws it.csi.csi.wrapper.CSIException{ «noSonarTag("EIAS")»
		return delegate.selfCheck(alreadyChecked);
	}
	
	/**
	 * @generated
	 */
	public boolean hasSelfCheck() «noSonarTag("EIAS")» 
	throws it.csi.csi.wrapper.CSIException{ «noSonarTag("EIAS")»
		return delegate.hasSelfCheck();
	}
	«ENDIF»
	
	/// lifecycle dell EJB
	
	/**
	 * @generated
	 */
	public void ejbActivate() throws EJBException, RemoteException {
		// TODO Auto-generated method stub
		
	}

    /**
	 * @generated
	 */
	public void ejbPassivate() throws EJBException, RemoteException {
		// TODO Auto-generated method stub
		
	}

    /**
	 * @generated
	 */
	public void ejbRemove() throws EJBException, RemoteException {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * @generated
	 */
	public void ejbCreate() {
    }
	  
    /**
	 * @generated
	 */
	SessionContext ctx = null;
	
	
	/**
	 * @generated
	 */
	public void createImpl(Object initOptions) throws EJBException{
		Logger logger = getLogger(null);
	    logger.debug("[«serviceBeanClassName()»::createImpl] - START");
		try{
		«IF (serviceImpl.implCartridge!=null && ((ManualImplCartridge)serviceImpl.implCartridge).useInjectedPojo) -»
		delegate = («serviceImplClassName()») SpringBeanLocator.getBean("«serviceImplClassName().toFirstLower()»");
		«ELSE-»
		delegate = new «serviceImplClassName()»();
		«ENDIF-»
		delegate.init(initOptions);
		«IF this.operations.select(e|e.txType==servicedef::TXTypeEnum::newLocalTX).size>0-»
		delegate.setSessionContext(ctx);	
		«ENDIF-»
		
		}
		
		catch(Exception ie){
			logger.debug("[«serviceBeanClassName()»::createImpl] - ERROR", ie);
			throw new EJBException("Errore nella inizializzazione dell'implementazione del servizio «codServizio»:"+ie.getMessage(),ie);
		}
		finally{
			logger.debug("[«serviceBeanClassName()»::createImpl] - END");
		}
	}
	
	/**
	 * @generated
	 */
	public void setSessionContext(SessionContext ctx) throws EJBException, RemoteException {
	  
	    /// META-TODO: forse sarebbe opportuno accodare il nome del servizio al logger...
	    Logger logger = getLogger(null);
	    logger.debug("[«serviceBeanClassName()»::setSessionContext] - START");
		this.ctx = ctx;
		// contiene eventuali oggetti inizializzati nella sezione seguente e che
		// devono essere passati all'oggetto delegate
		Object implInitOptions = null;
		
		/// Inizializzazione risorse
		«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("initResources"+codServizio)»
        // inserire qui il codice di inziializzazione risorse:
        // non verrà cancellato dalle successive rignerazioni
        // esempio di cose da fare:
        // -- leggere environment entry o context jndi 
        // -- inizializzare datasource, altre risorse
        // -- inserire le options in 'implInitOptions': saranno poi 
        //    passate al metodo initImpl()
        // NOTA: il contenuto specifico dell'oggetto implInitOptions è
        // specifico di ogni applicazione		
		«ENDPROTECT» 
	    /// creazione dell'implementazione
		createImpl(implInitOptions);	
		logger.debug("[«serviceBeanClassName()»::setSessionContext] - END");
	}
	
	/**
	 * @generated
	 */
	protected Logger getLogger(String subsystem){
	  if (subsystem!=null)
	  	return Logger.getLogger(LOGGER_PREFIX+"."+subsystem);
	  else
	    return Logger.getLogger(LOGGER_PREFIX);
	}
}

	«ENDFILE»
«ENDDEFINE»




«REM»
***************************************************************
classe del 'delegate' che implementa effettivamente il servizio
(l'implementazione dei metodi di business va qui dentro).
In caso di livello di sicurezza > A0 viene aggiunto un parametro
che conterrà il principal derivante dal SessionContext [STDAPS-82]
***************************************************************
«ENDREM»
«DEFINE javaServiceDelegateClassFile (SOABEModel model)FOR ServiceDef»
	«FILE fullServiceEJBClassesDir(codServizio,model)+"/"+serviceImplClassName()+".java"»
package «getFullServiceEJBPkg(codServizio, model)»;

import it.csi.csi.wrapper.*;

«IF this.types.types.select(t|t.metaType== Entity)!=null»
import «fullQualifiedEntitiesPkg(codServizio, model)».*;
«ENDIF»
import «fullQualifiedServiceInterfacePkg(model)».*;
«IF this.types.types.select(t|t.metaType== Exception)!=null»
import «fullQualifiedServiceExceptionPkg(codServizio, model)».*;
«ENDIF»
«IF monitorable||diagEnabled»
import it.csi.coopdiag.api.*;
import it.csi.coopdiag.engine.utils.*;
«ENDIF»
import javax.ejb.SessionContext;
import javax.sql.DataSource;
import org.apache.log4j.*;

«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("extraImport"+codServizio)»
// aggiungere qui eventuali import aggiuntive.
// verranno preservate in rigenerazioni successive del progetto
«ENDPROTECT»

/**
 * @generated
 */
public class «serviceImplClassName()» {
    /**
	 * @generated
	 */
	public static final String LOGGER_PREFIX = "«getLoggerPrefixForComponent(model.codProdotto,model.codComponente)»";
	«IF this.operations.select(e|e.txType==servicedef::TXTypeEnum::newLocalTX).size>0-»
	private SessionContext sessionContext;
	
	public SessionContext getSessionContext() {
		return sessionContext;
	}

	public void setSessionContext(SessionContext sessionContext) {
		this.sessionContext = sessionContext;
	}
	«ENDIF-»
	
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("implLocalVars"+codServizio)»
	// inserire qui la definizione di varibili locale o costanti dell'implementazione.
	// non verranno sovrascritte da successive rigenerazioni
	«ENDPROTECT»
	
	/// Implementazione operazioni esposte dal servizio
	
	«EXPAND operationImplementation (model, codServizio,serviceImplClassName(this), this)FOREACH this.operations»
	«IF this.monitorable || this.diagEnabled»
	/// dichiarazione del self checker (utilizzato in monitoraggio e diagnostica)
	/**
	 * @generated
	 */
	String _codS = "«model.codProdotto»"; // e' corretto che sia il codice prodotto?
	/**
	 * @generated
	 */
	String _codR = "«removeSeparator(codServizio)»";
	/**
	 * @generated
	 */
	String [] _suppS = new String[]{
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("suppS"+model.codComponente+codServizio)»
	// inserire qui i codici sistema dei supplier diretti (se ci sono)
	// es: "Sistema1","Sistema2"
	«ENDPROTECT»
	};
	/**
	 * @generated
	 */
	String [] _suppR = new String[]{
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("suppR"+model.codComponente+codServizio)»
	// inserire qui i codici risorsa dei supplier diretti (se ci sono)
	// es: "risorsa1","risorsa2"
	// (corrispondono ai codici servizio dei corrispondenti servizi -
	// vedere documentazione coop-diag)
	«ENDPROTECT»
	};
	
	/**
	 * @generated
	 */
	DefaultSelfChecker schk = new DefaultSelfChecker(_codS, _codR,
					getLogger(null).getName(), _suppS, _suppR, "/checked_resources_«removeSeparator(codServizio).toLowerCase()».xml");
	
	«ENDIF»
	«IF this.monitorable»
	/**
	 * @generated
	 */
	public boolean testResources() «noSonarTag("EIAS")» 
		throws  it.csi.csi.wrapper.CSIException{ «noSonarTag("EIAS")»
		Logger logger = getLogger(null);
		logger.debug("[«serviceImplClassName()»::testResources()] BEGIN");
		InvocationNode in = new InvocationNode();
		try {					
			logger.debug("[«serviceImplClassName()»::testResources()] END");
			return schk.testResources();
		} catch (CSIException ex) {
			logger
					.error("[«serviceImplClassName()»::testResources()] : si è verificato un errore  "
							+ ex);
			throw ex;
		}
	}
	«ENDIF»
	«IF this.diagEnabled»
	/**
	 * @generated
	 */
	public it.csi.coopdiag.api.InvocationNode selfCheck( «noSonarTag("EIAS")» 
		it.csi.coopdiag.api.CalledResource[] alreadyChecked ) «noSonarTag("EIAS")» 
		throws it.csi.csi.wrapper.CSIException{ «noSonarTag("EIAS")»
		Logger logger = getLogger(null);
	 	logger.debug("[«serviceImplClassName()»::selfCheck] - BEGIN");
		InvocationNode in = new InvocationNode();
		try {
			return schk.selfCheck(alreadyChecked);
		} catch (CSIException ex) {
			logger.error("[«serviceImplClassName()»::selfCheck()] si è verificato un errore  "
					+ ex);
		}
		logger.debug("[«serviceImplClassName()»::selfCheck] - END");
		// restituisco l’invocation node
		return in;
	}
	
	/**
	 * @generated
	 */
	public boolean hasSelfCheck() «noSonarTag("EIAS")» 
		throws it.csi.csi.wrapper.CSIException{ «noSonarTag("EIAS")»
		return true;
	}
	«ENDIF»
	
	/// inizializzazione
	/**
	 * @generated
	 */
	public void init(Object initOptions){
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("initImpl"+codServizio)»
	// inserire qui il codice di inizializzazione della implementazione
	// non verrà sovrascritto da successive rigenerazioni
	«ENDPROTECT»
	}
	
	/**
	 * @generated
	 */
	protected Logger getLogger(String subsystem){
	  if (subsystem!=null)
	  	return Logger.getLogger(LOGGER_PREFIX+"."+subsystem);
	  else
	    return Logger.getLogger(LOGGER_PREFIX);
	}
	
	/// eventuali metodi aggiuntivi
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("implOtherMethods"+codServizio)»
	// inserire qui la dichiarazione di eventuali metodi aggiuntivi utili
	// per l'implementazione.
	// non verrà sovrascritto da successive rigenerazioni.
	«ENDPROTECT»
}
	«ENDFILE»
«ENDDEFINE»

«REM»
***************************************************************
classe del 'delegate' che implementa effettivamente il servizio
(l'implementazione dei metodi di business va qui dentro)
***************************************************************
«ENDREM»
«DEFINE javaOrchServiceDelegateClassFile (SOABEModel model)FOR ServiceDef»
	«FILE fullServiceEJBClassesDir(codServizio, model)+"/"+serviceImplClassName()+".java"»
package «getFullServiceEJBPkg(codServizio, model)»;

import it.csi.csi.wrapper.*;
import it.csi.svcflow.orchestrator.engine.OswMainEngine;
import com.opensymphony.workflow.WorkflowException;

import «fullQualifiedEntitiesPkg(codServizio, model)».*;
import «fullQualifiedServiceInterfacePkg(model)».*;
import «fullQualifiedServiceExceptionPkg(codServizio, model)».*;
«IF monitorable||diagEnabled»
import it.csi.coopdiag.api.*;
import it.csi.coopdiag.engine.utils.*;
«ENDIF»
import javax.sql.DataSource;
import org.apache.log4j.*;

«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("extraImport"+codServizio)»
// aggiungere qui eventuali import aggiuntive.
// verranno preservate in rigenerazioni successive del progetto
«ENDPROTECT»

/**
 * @generated
 */
public class «serviceImplClassName()» implements «serviceInterfaceName()»{
    
    /**
	 * @generated
	 */
	public static final String LOGGER_PREFIX = "«getLoggerPrefixForComponent(model.codProdotto,model.codComponente)»";
	
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("implLocalVars"+codServizio)»
	// inserire qui la definizione di varibili locale o costanti dell'implementazione.
	// non verranno sovrascritte da successive rigenerazioni
	«ENDPROTECT»
	
	/// Implementazione operazioni esposte dal servizio
	
	«EXPAND operationOrchImplementation (model, codServizio,serviceImplClassName(this), this)FOREACH this.operations»
	«IF this.monitorable || this.diagEnabled»
	/// dichiarazione del self checker (utilizzato in monitoraggio e diagnostica)
	/**
	 * @generated
	 */
	String _codS = "«model.codProdotto»"; // e' corretto che sia il codice prodotto?
	
	/**
	 * @generated
	 */
	String _codR = "«removeSeparator(codServizio)»";
	
	/**
	 * @generated
	 */
	String [] _suppS = new String[]{
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("suppS"+model.codComponente+codServizio)»
	// inserire qui i codici sistema dei supplier diretti (se ci sono)
	// es: "Sistema1","Sistema2"
	«ENDPROTECT»
	};
	
	/**
	 * @generated
	 */
	String [] _suppR = new String[]{
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("suppR"+model.codComponente+codServizio)»
	// inserire qui i codici risorsa dei supplier diretti (se ci sono)
	// es: "risorsa1","risorsa2"
	// (corrispondono ai codici servizio dei corrispondenti servizi -
	// vedere documentazione coop-diag)
	«ENDPROTECT»
	};
	
	/**
	 * @generated
	 */
	DefaultSelfChecker schk = new DefaultSelfChecker(_codS, _codR,
					getLogger(null).getName(), _suppS, _suppR, "/checked_resources_«removeSeparator(codServizio).toLowerCase()».xml");
	
	«ENDIF»
	«IF this.monitorable»
	/**
	 * @generated
	 */
	public boolean testResources() «noSonarTag("EIAS")» 
	throws  it.csi.csi.wrapper.CSIException{	«noSonarTag("EIAS")»
		Logger logger = getLogger(null);
		logger.debug("[«serviceImplClassName()»::testResources()] BEGIN");
		InvocationNode in = new InvocationNode();
		try {					
			logger.debug("[«serviceImplClassName()»::testResources()] END");
			return schk.testResources();
		} catch (CSIException ex) {
			logger
					.error("[«serviceImplClassName()»::testResources()] : si è verificato un errore  "
							+ ex);
			throw ex;
		}
	}
	«ENDIF»
	«IF this.diagEnabled»
	/**
	 * @generated
	 */
	public it.csi.coopdiag.api.InvocationNode selfCheck( «noSonarTag("EIAS")» 
		it.csi.coopdiag.api.CalledResource[] alreadyChecked ) «noSonarTag("EIAS")» 
			throws it.csi.csi.wrapper.CSIException{ «noSonarTag("EIAS")»
		Logger logger = getLogger(null);
	 	logger.debug("[«serviceImplClassName()»::selfCheck] - BEGIN");
		InvocationNode in = new InvocationNode();
		try {
			return schk.selfCheck(alreadyChecked);
		} catch (CSIException ex) {
			logger.error("[«serviceImplClassName()»::selfCheck()] si è verificato un errore  "
					+ ex);
		}
		logger.debug("[«serviceImplClassName()»::selfCheck] - END");
		// restituisco l’invocation node
		return in;
	}
	
	/**
	 * @generated
	 */
	public boolean hasSelfCheck() «noSonarTag("EIAS")»
	throws it.csi.csi.wrapper.CSIException{ «noSonarTag("EIAS")»
		return true;
	}
	«ENDIF»
	
	/// inizializzazione
	/**
	 * @generated
	 */
	public void init(Object initOptions){
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("initImpl"+codServizio)»
	// inserire qui il codice di inizializzazione della implementazione
	// non verrà sovrascritto da successive rigenerazioni
	«ENDPROTECT»
	}
	
	/**
	 * @generated
	 */
	protected Logger getLogger(String subsystem){
	  if (subsystem!=null)
	  	return Logger.getLogger(LOGGER_PREFIX+"."+subsystem);
	  else
	    return Logger.getLogger(LOGGER_PREFIX);
	}
	
	/// eventuali metodi aggiuntivi
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("implOtherMethods"+codServizio)»
	// inserire qui la dichiarazione di eventuali metodi aggiuntivi utili
	// per l'implementazione.
	// non verrà sovrascritto da successive rigenerazioni.
	«ENDPROTECT»
}
	«ENDFILE»
«ENDDEFINE»



«DEFINE operationImplementation (SOABEModel model, String codServ, String implClassName, ServiceDef sd) FOR Operation»
  /**
   * @generated
   */
  public «map2javaType(this.returnType,codServ,model)» «this.name» ( «noSonarTag("EIAS")»
    «IF params != null && params.size > 0»
    	«IF params.size==1»
    		«EXPAND template::javafiles::paramDef (model,codServ,false) FOREACH params.select(e|e==params.last())»
    	«ELSE»
    		«EXPAND template::javafiles::paramDef (model,codServ,true) FOREACH params.select(e|e!=params.last())»
    		«EXPAND template::javafiles::paramDef (model,codServ,false) FOREACH params.select(e|e==params.last())»
    	«ENDIF»	
    «ENDIF»
    «IF this.opType != OpTypeEnum::synch»«IF params!=null && params.size>0»,«ENDIF» it.csi.csi.util.DatiMessaggio datiMsg«ENDIF»
    «IF sd.authLevel != AuthLevelEnum::A0»«IF this.params.size>0», «ENDIF» java.security.Principal principal«ENDIF»
  )	«noSonarTag("EIAS")»
  throws	«noSonarTag("EIAS")»
  	it.csi.csi.wrapper.CSIException, «noSonarTag("EIAS")» 
  	it.csi.csi.wrapper.SystemException, «noSonarTag("EIAS")»
  	it.csi.csi.wrapper.UnrecoverableException	«noSonarTag("EIAS")»
  «EXPAND template::javafiles::exceptionInThrowsClause(model,codServ) FOREACH throws»
  { «noSonarTag("EIAS")»
     Logger logger = getLogger(null);
	 logger.debug("[«implClassName»::«name»] - START");
	 «IF sd.authLevel != AuthLevelEnum::A0»logger.debug("[«implClassName»::«name»] - caller principal:"+principal);«ENDIF»
	 it.csi.util.performance.StopWatch watcher= new it.csi.util.performance.StopWatch("«model.codComponente»");
	 // inizio misurazione
	 watcher.start();
	 
	 «PROTECT CSTART '/*' CEND '*/' ID getRegionUID("implCodeLocals"+implClassName+"_"+name)»
	 // inserire qui la dichiarazione di variabili locali al metodo
	 // non verrà sovrascritto nelle successive rigenerazioni
	 «ENDPROTECT»
	 try {
     «PROTECT CSTART '/*' CEND '*/' ID getRegionUID("implCodeStmt"+implClassName+"_"+name)»
     // inserire qui il codice di implementazione del metodo '«name»'.
     // non verrà sovrascritto nelle successive rigenerazioni
	 
     «IF returnType!=null»return «defaultInitVal(returnType)»;
     «ENDIF»
     «ENDPROTECT»
     }
     «IF this.txType==servicedef::TXTypeEnum::newLocalTX -»
     catch (RuntimeException ex) {
			sessionContext.setRollbackOnly();
			logger.error(
					"[SrvbibliotecaImpl::leggiBiblioteca] - Errore imprevisto occorso durante l'esecuzione del metodo:"
							+ ex+"Forzata RollBack Transazione", ex);
			throw new UnrecoverableException(
					"Errore imprevisto occorso durante l'esecuzione del metodo:"
							+ ex+"Forzata RollBack Transazione", ex);
	}
	«ENDIF-»
     catch(Exception ex){
        if (CSIException.class.isAssignableFrom(ex.getClass())){
        	logger.error("[«implClassName»::«name»] - Errore CSI occorso durante l'esecuzione del metodo:"+ex, ex);
     		throw (CSIException)ex;
        }
        else{
			logger.error("[«implClassName»::«name»] - Errore imprevisto occorso durante l'esecuzione del metodo:"+ex, ex);
			throw new UnrecoverableException("Errore imprevisto occorso durante l'esecuzione del metodo:"+ex,ex);
		}        
     }
     finally{
       // fine misurazione
       watcher.stop();
	   watcher.dumpElapsed("«implClassName»", "«name»()", "invocazione servizio [«removeSeparator(codServ)»]::[«name»]", "(valore input omesso)");
	   logger.debug("[«implClassName»::«name»] - END");
     }
  }
«ENDDEFINE»

«DEFINE operationOrchImplementation (SOABEModel model, String codServ, String implClassName, ServiceDef sd) FOR Operation»
  /**
   * @generated
   */
  public «map2javaType(this.returnType,codServ, model)» «this.name» ( «noSonarTag("EIAS")»
    «IF params != null && params.size > 0»
    	«IF params.size==1»
    		«EXPAND template::javafiles::paramDef (model,codServ,false) FOREACH params.select(e|e==params.last())»
    	«ELSE»
    		«EXPAND template::javafiles::paramDef (model,codServ,true) FOREACH params.select(e|e!=params.last())»
    		«EXPAND template::javafiles::paramDef (model,codServ,false) FOREACH params.select(e|e==params.last())»
    	«ENDIF»	
    «ENDIF»
    «IF this.opType != OpTypeEnum::synch»«IF params!=null && params.size>0»,«ENDIF» it.csi.csi.util.DatiMessaggio datiMsg«ENDIF»
    «IF sd.authLevel != AuthLevelEnum::A0»«IF this.params.size>0», «ENDIF»java.security.Principal principal«ENDIF»
  ) «noSonarTag("EIAS")»
  throws «noSonarTag("EIAS")»
  	it.csi.csi.wrapper.CSIException, «noSonarTag("EIAS")» 
  	it.csi.csi.wrapper.SystemException,	«noSonarTag("EIAS")» 
  	it.csi.csi.wrapper.UnrecoverableException	«noSonarTag("EIAS")»
  «EXPAND template::javafiles::exceptionInThrowsClause(model,codServ) FOREACH throws»
  { «noSonarTag("EIAS")»
     Logger logger = getLogger(null);
	 logger.debug("[«implClassName»::«name»] - START");
	 «IF sd.authLevel != AuthLevelEnum::A0»logger.debug("[«implClassName»::«name»] - caller principal:"+principal);«ENDIF»
	 it.csi.util.performance.StopWatch watcher= new it.csi.util.performance.StopWatch("«model.codComponente»");
	 // inizio misurazione
	 watcher.start();
	 
	 «PROTECT CSTART '/*' CEND '*/' ID getRegionUID("implCodeLocals"+implClassName+"_"+name)»
	 // inserire qui la dichiarazione di variabili locali al metodo
	 // non verrà sovrascritto nelle successive rigenerazioni
	 String remoteUser = "<???>";
	 String workflowDescriptor="«removeSeparator(codServ)+name.toFirstUpper()»";
	 java.util.HashMap persistentParams = new java.util.HashMap();
	 «ENDPROTECT»
	 try {
	 	// inserimento nel context dei parametri del metodo (senza trasformazioni)
	 	«FOREACH params AS currPar»
	 	persistentParams.put("input.parameter.«currPar.name»",«currPar.name»);
	 	«ENDFOREACH»
	 	«IF this.opType != OpTypeEnum::synch»persistentParams.put("input.parameter.datiMsg",datiMsg);«ENDIF»
     «PROTECT CSTART '/*' CEND '*/' ID getRegionUID("implCodeStmtPreFlow"+implClassName+"_"+name)»
     	// inserire qui eventuale codice aggiuntivo di inizializzazione del flusso
     	// (inserimento nel context degli oggetti necessari al flusso oltre ai parametri)
     	// non verrà sovrascritto nelle successive rigenerazioni
	 
	 «ENDPROTECT»
		 // inizializzazione e richiamo del flusso
		 try{
		 	OswMainEngine.esecuzioneWorkflow(remoteUser,workflowDescriptor,new Integer(0),persistentParams);
		 }
		 catch(WorkflowException wfe){
		 	logger.error("[«implClassName»::«name»] - errore non gestito nell'esecuzione del flusso",wfe);
		 	UnrecoverableException ue = new UnrecoverableException("Errore non gestito nell'esecuzione del flusso: "+wfe.getMessage(),wfe);
		 	throw ue;
		 }
	 «PROTECT CSTART '/*' CEND '*/' ID getRegionUID("implCodeStmtPostFlow"+implClassName+"_"+name)»
	     // inserire qui il codice di terminazione del flusso
	     // (reperimento del risultato dal context del flusso e trasformazione
	     // nel risultato finale)
	     // non verrà sovrascritto nelle successive rigenerazioni
     «IF returnType!=null»
     	
     	return («map2javaType(returnType,codServ, model)»)persistentParams.get("result");
     «ENDIF»
     «ENDPROTECT»
     	}
     catch(Exception ex){
        if (CSIException.class.isAssignableFrom(ex.getClass())){
        	logger.error("[«implClassName»::«name»] - Errore CSI occorso durante l'esecuzione del metodo:"+ex, ex);
     		throw (CSIException)ex;
        }
        else{
			logger.error("[«implClassName»::«name»] - Errore imprevisto occorso durante l'esecuzione del metodo:"+ex, ex);
			throw new UnrecoverableException("Errore imprevisto occorso durante l'esecuzione del metodo:"+ex,ex);
		}        
     }
     finally{
       // fine misurazione
       watcher.stop();
	   watcher.dumpElapsed("«implClassName»", "«name»()", "invocazione servizio [«removeSeparator(codServ)»]::[«name»]", "(valore input omesso)");
	   logger.debug("[«implClassName»::«name»] - END");
     }
  }
«ENDDEFINE»

«REM»classi di startup per SPRING«ENDREM»
«DEFINE springStartupFiles (SOABEModel model) FOR ManualImplCartridge»
	«IF isJbossPlatform(model.targetPlatform)»
		«EXPAND loadStartupServiceMBeanFiles(model) FOR this»
	«ELSE»
		«EXPAND springStartupListener(model) FOR this»
	«ENDIF»
	«EXPAND springLocatorFile(model) FOR this»
«ENDDEFINE»

«DEFINE springLocatorFile(SOABEModel model) FOR ManualImplCartridge»
«LET (ServiceImpl)eContainer AS impl-»
«FILE fullServiceEJBClassesDir(impl.provides.codServizio, model)+"/spring/"+"SpringBeanLocator.java"»package «getFullServiceEJBPkg(impl.provides.codServizio, model)».spring;

/**
 * 
 * @generated
 *
 */
public class SpringBeanLocator {

	/**
	 * @generated
	 */
	public static Object getBean(String beanName) {
«IF isJbossPlatform(model.targetPlatform)-»
		return «getFullServiceEJBPkg(impl.provides.codServizio, model)».spring.startup.LoadStartupService.getBean(beanName);
«ELSE-»
		return «getFullServiceEJBPkg(impl.provides.codServizio, model)».spring.startup.SpringStartupListener.getBean(beanName);
«ENDIF-»
		
	}
}

«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE loadStartupServiceMBeanFiles(SOABEModel model) FOR ManualImplCartridge»
«LET (ServiceImpl)eContainer AS impl-»
«FILE fullServiceEJBClassesDir(impl.provides.codServizio, model)+"/spring/startup/"+"LoadStartupService.java"»package «getFullServiceEJBPkg(impl.provides.codServizio, model)».spring.startup;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.context.access.ContextBeanFactoryReference;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.apache.log4j.Logger;

/**
 * @generated
 */
public class LoadStartupService implements LoadStartupServiceMBean {

	/**
	 * @generated
	 */
	public static final String LOGGER_PREFIX = "«getLoggerPrefixForComponent(model.codProdotto, model.codComponente)»";
	public static final Logger LOGGER = Logger.getLogger(LOGGER_PREFIX);
	
	/** Spring BeanFactory that provides the namespace for this EJB 
	* @generated
	*/
	private static BeanFactoryReference beanFactoryReference;
	
	/**
 	 * @generated
 	 */
	private String message = "problems....";

	/**
	 * @generated
 	 */
	public String getMessage() {
		return message;
	}

	/**
	 * @generated
 	 */
	public void setMessage(String message) {
		this.message = message;
	}

	/**
	 * @generated
 	 */
	public void printMessage() {
		LOGGER.info(message);
	}

	/**
	 * @generated
 	 */
	public void start() throws Exception {
		LOGGER.debug("Messaggio di avvio MBEAN=" + message);
		try {
			String [] springCfg = new String[]{
				"META-INF/«impl.provides.codServizio.toLowerCase()»BeanContext.xml",
				"META-INF/«impl.provides.codServizio.toLowerCase()»Dao-beans.xml"
			};
			ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(springCfg);
			beanFactoryReference = new ContextBeanFactoryReference(ctx);

		} catch (Exception e) {
			LOGGER.error("Attenzione si è verificata un'eccezione: " + e, e);
			throw e;
		}
		LOGGER.debug("Chiamata da MBEAN eseguita!!!!");
	}

	/**
	 * @generated
 	 */
	public static Object getBean(String beanName) {

		Object beanObject = null;

		try {

			beanObject = beanFactoryReference.getFactory().getBean(beanName);

		} catch (Exception e) {
			LOGGER.error("Attenzione si è verificata un'eccezione: " + e, e);
		}

		return beanObject;
	}

	/**
	 * @generated
 	 */
	public void stop() {
		LOGGER.debug("Messaggio di stop MBEAN=" + message);
	}
}

«ENDFILE-»

«FILE fullServiceEJBClassesDir(impl.provides.codServizio, model)+"/spring/startup/"+"LoadStartupServiceMBean.java"»package «getFullServiceEJBPkg(impl.provides.codServizio, model)».spring.startup;

/**
 * @generated
 */
public interface LoadStartupServiceMBean
{
   /**
	* @generated
 	*/
   String getMessage();
   
   /**
	* @generated
 	*/
   void setMessage(String message);
   
   /**
	* @generated
 	*/
   void printMessage();
   
   /**
	* @generated
 	*/
   void start() throws Exception;
   
   /**
	* @generated
 	*/
   void stop();
}

«ENDFILE-»
«ENDLET-»
«ENDDEFINE»

«DEFINE springStartupListener(SOABEModel model) FOR ManualImplCartridge»
«LET (ServiceImpl)eContainer AS impl-»
«FILE fullServiceEJBClassesDir(impl.provides.codServizio, model)+"/spring/startup/"+"SpringStartupListener.java"»package «getFullServiceEJBPkg(impl.provides.codServizio, model)».spring.startup;

import org.apache.log4j.Logger;

import org.springframework.beans.factory.access.BeanFactoryReference;
import org.springframework.context.access.ContextBeanFactoryReference;
import org.springframework.context.support.ClassPathXmlApplicationContext;


import weblogic.application.ApplicationLifecycleListener;
import weblogic.application.ApplicationLifecycleEvent;

/**
 * @generated
 */
public class SpringStartupListener extends ApplicationLifecycleListener{
	
	/**
	 * @generated
	 */
	public static final String LOGGER_PREFIX = "«getLoggerPrefixForComponent(model.codProdotto, model.codComponente)»";
	public static final Logger LOGGER = Logger.getLogger(LOGGER_PREFIX);
	
	/**
	 * @generated
 	 */
	public static final String BEAN_FACTORY_PATH_ENVIRONMENT_KEY = "java:comp/env/ejb/BeanFactoryPath";
  
	/**
	 * Spring BeanFactory that provides the namespace for this EJB
	 * @generated
 	 */
	private static BeanFactoryReference beanFactoryReference;
	
	/**
	 * @generated
 	 */
	public void preStart(ApplicationLifecycleEvent evt) {
		// metodo intenzionalmente vuoto
	}

	/**
	 * @generated
 	 */
	public void postStart(ApplicationLifecycleEvent evt) {

		try {			
			String [] springCfg = new String[]{
				"META-INF/«impl.provides.codServizio.toLowerCase()»BeanContext.xml",
				"META-INF/«impl.provides.codServizio.toLowerCase()»Dao-beans.xml"
			};			
			ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(springCfg);
			beanFactoryReference = new ContextBeanFactoryReference(ctx);			
			
		} catch (Exception e) {
			LOGGER.error("Attenzione si è verificata un'eccezione: " + e, e); 
		}
		
	}

	/**
	 * @generated
 	 */
	public static Object getBean(String beanName){
		
		Object beanObject = null;
		
		try {
			
			beanObject = beanFactoryReference.getFactory().getBean(beanName);
			
		} catch (Exception e) {
			LOGGER.error("Attenzione si è verificata un'eccezione: " + e, e); 
		}
		
		return beanObject;
	}
	
	/**
	 * @generated
 	 */
	public void preStop(ApplicationLifecycleEvent evt) {
		// metodo intenzionalmente vuoto
	} 

	/**
	 * @generated
 	 */
	public void postStop(ApplicationLifecycleEvent evt) {
		// metodo intenzionalmente vuoto
	}
	
}
«ENDFILE-»
«ENDLET-»
«ENDDEFINE»