import servicegen;
import typedef;
import servicedef;

/// standard generici J2EE Csi piemonte
String getGeneratedJavaSrcDir(SOABEModel model) :
	"src/java";

String getConfigRootDir(SOABEModel model) :
  "conf";

String getDocsRootDir(SOABEModel model) :
  "docs";

String getTestDir(SOABEModel model) :
  "test";
  
String getTestJavaDir(SOABEModel model) :
  "test/java";
 
String getEjbConfigRootDir(SOABEModel model) :
  getConfigRootDir(model)+"/ejb";
  
String getTestXmlFilesDir(String codServizio, SOABEModel model) :
	getTestDir(model)+"/java/test/"+removeSeparator(codServizio);
  
  
String getSpecificEjbConfigRootDir(String codEjb, SOABEModel model) :
  getEjbConfigRootDir(model)+"/"+codEjb;
  
String getWarConfigRootDir(SOABEModel model) :
  getConfigRootDir(model)+"/web";
  
// conf/<tipobinding>/<codwar>
String getSpecificWarConfigRootDir(String codBinding, String codWar, SOABEModel model) :
  getWarConfigRootDir(model)+"/"+codBinding+"/"+codWar;

String getWarResourcesRootDir(SOABEModel model) :
  "src/web";
  
String getSpecificWarResourcesRootDir(String codBinding, String codWar, SOABEModel model) :
  getWarResourcesRootDir(model)+"/"+codBinding+"/"+codWar;
  
  
String fullEjbStdClassesDir(SOABEModel model) :
    getGeneratedJavaSrcDir(model)+"/it/csi/"+model.codProdotto.toLowerCase()+"/"+model.codComponente.toLowerCase()+"/business";

String getFullEJBStdPkg(SOABEModel model) :
	    "it.csi."+model.codProdotto.toLowerCase()+"."+model.codComponente.toLowerCase()+".business";
	        
String getSQLSrcDir(SOABEModel model) :
	"src/sql";
	    
// STD: DSP_STD_0000_GUI_081007_V02_Logging.pdf#4.2
String getLoggerPrefixForComponent(String codProd, String codComponent) :
	codComponent.toLowerCase();

	
/// standard specifici per CSI


///// NAMING PACKAGE JAVA

// full qualified name dell'interfaccia pubblica del servizio (java)
String fullQualifiedServiceInterfacePkg(servicedef::ServiceDef sd, SOABEModel model) :
    "it.csi."+model.codProdotto.toLowerCase()+"."+model.codComponente.toLowerCase()+".interfacecsi."+removeSeparator(sd.codServizio);

String fullQualifiedEntitiesPkg(String codServ, SOABEModel model) :
    "it.csi."+model.codProdotto.toLowerCase()+"."+model.codComponente.toLowerCase()+".dto."+removeSeparator(codServ);

String fullQualifiedServiceExceptionPkg(String codServ, SOABEModel model) :
    "it.csi."+model.codProdotto.toLowerCase()+"."+model.codComponente.toLowerCase()+".exception."+removeSeparator(codServ);

String getFullServiceEJBPkg(String codServ, SOABEModel model) :
	getFullEJBStdPkg(model)+"."+removeSeparator(codServ);

String getFullServiceTestPkg(String codServ, SOABEModel model) :
	"test"+"."+removeSeparator(codServ);
	
//// NAMING CLASSI
		
String serviceInterfaceName(ServiceDef sd) :
	toCamel(sd.codServizio)+"Srv";
    	
String fullQualifiedServiceInterfaceName(ServiceDef sd, SOABEModel model) :
    fullQualifiedServiceInterfacePkg(sd,model)+"."+serviceInterfaceName(sd);

String serviceRemoteInterfaceName(ServiceDef sd) :
	toCamel(sd.codServizio)+"Remote";

String serviceLocalInterfaceName(ServiceDef sd) :
	toCamel(sd.codServizio)+"Local";


String fullQualifiedServiceRemoteInterfaceName(EJBPABinding sb, ServiceDef sd, SOABEModel model) :
    getFullServiceEJBPkg(sd.codServizio, model)+"."+serviceRemoteInterfaceName(sd);    
    
String fullQualifiedServiceLocalInterfaceName(EJBPABinding sb, ServiceDef sd, SOABEModel model) :
    getFullServiceEJBPkg(sd.codServizio, model)+"."+serviceLocalInterfaceName(sd);
        
String serviceHomeInterfaceName(ServiceDef sd) :
	toCamel(sd.codServizio)+"Home";

String serviceLocalHomeInterfaceName(ServiceDef sd) :
	toCamel(sd.codServizio)+"LocalHome";
	
String fullQualifiedServiceHomeInterfaceName(EJBPABinding sb, ServiceDef sd, SOABEModel model) :
    getFullServiceEJBPkg(sd.codServizio.toLowerCase(), model)+"."+serviceHomeInterfaceName(sd);

String fullQualifiedServiceLocalHomeInterfaceName(EJBPABinding sb, ServiceDef sd, SOABEModel model) :
    getFullServiceEJBPkg(sd.codServizio.toLowerCase(), model)+"."+serviceLocalHomeInterfaceName(sd);
 
String serviceBeanClassName(ServiceDef sd) :
	toCamel(sd.codServizio)+"Bean";

String fullQualifiedServiceBeanClassName(EJBPABinding sb, ServiceDef sd, SOABEModel model) :
    getFullServiceEJBPkg(sd.codServizio, model)+"."+serviceBeanClassName(sd);  

String serviceImplClassName(ServiceDef sd) :
	toCamel(sd.codServizio)+"Impl";
	
String serviceTestClassName(ServiceDef sd) :
	"Test"+toCamel(sd.codServizio);	

String fullQualifiedServiceImplClassName(EJBPABinding sb, ServiceDef sd, SOABEModel model) :
    getFullServiceEJBPkg(sd.codServizio, model)+"."+serviceImplClassName(sd);  

String fullQualifiedServiceTestClassName(EJBPABinding sb,ServiceDef sd, SOABEModel model) :
    getFullServiceTestPkg(sd.codServizio, model)+"."+serviceTestClassName(sd);  


//// NAMING DIRECTORY
String fullServiceInterfaceDir(ServiceDef sd, String codServ, SOABEModel model) :
    getGeneratedJavaSrcDir(model)+"/it/csi/"+model.codProdotto.toLowerCase()+"/"+model.codComponente.toLowerCase()+"/interfacecsi/"+removeSeparator(codServ);
    
String fullEntitiesDir(String codServ, SOABEModel model) :
    getGeneratedJavaSrcDir(model)+"/it/csi/"+model.codProdotto.toLowerCase()+"/"+model.codComponente.toLowerCase()+"/dto/"+removeSeparator(codServ);

String fullServiceExceptionsDir(String codServ, SOABEModel model) :
    getGeneratedJavaSrcDir(model)+"/it/csi/"+model.codProdotto.toLowerCase()+"/"+model.codComponente.toLowerCase()+"/exception/"+removeSeparator(codServ);

String fullServiceEJBClassesDir(String codServ, SOABEModel model) :
    fullEjbStdClassesDir(model)+"/"+removeSeparator(codServ);

String fullServiceTestClassesDir(String codServ, SOABEModel model) :
    getTestJavaDir(model)+"/test"+"/"+removeSeparator(codServ);
        
// da par. 3.7 linee guida gestione oggetti SOA        
String fullCSIRegistryConfigDir(SOABEModel model) :
	getConfigRootDir(model)+"/registry";

// da Dev. guide CSI
String getfullRegistryDDFileName(SOABEModel model) :
    fullCSIRegistryConfigDir(model)+"/deploy-descriptor.xml";
    
String getFullRegistryServiceDir(ServiceDef sd, SOABEModel model) :
	fullCSIRegistryConfigDir(model)+"/"+removeSeparator(sd.codServizio);

String getRegistryPDFileName(ServiceDef sd, ServiceBinding bind, TargetPlatform tp, SOABEModel model) :
	"defpd_"+removeSeparator(sd.codServizio)+"_"+decodeTipoInter(bind, tp)+".xml";
	
String getFullRegistryPDFileName(ServiceDef sd, ServiceBinding bind, TargetPlatform tp, SOABEModel model) :
    fullCSIRegistryConfigDir(model)+"/"+getRegistryPDFileName(sd,bind,tp, model);
    
String decodeTipoInter(ServiceBinding sd, TargetPlatform tp) :
	(sd.metaType==EJBPABinding ? 
      (tp.code==TargetPlatformCodes::WLS92 ? "CSI-java-t3" : "CSI-java-jnp")
    : 
      ( sd.metaType==WSFADBinding ? "WS-SOAP" : "CSI-http")
    );
     
    
// metto anche i files di config svcflow divisi per modulo
String svcflowConfDirForService(String codServizio, SOABEModel model) :
	"conf/orchestrator/descriptor/"+removeSeparator(codServizio);	
	
//// NAMING per J2EE DESCRIPTORS e CONFIG PAPD
    
String getServiceBeanName(EJBPABinding pa, ServiceDef sd) :
	toCamel(sd.codServizio)+"Bean";
	
String getPABeanName(EJBPABinding pa, ServiceDef sd) :
	toCamel(sd.codServizio)+"PA";

String getQMGRBeanName(EJBPABinding pa, ServiceDef sd) :
	toCamel(sd.codServizio)+"QMGR";
	
String getAsyncLtrBeanName(EJBPABinding pa, ServiceDef sd) :
	toCamel(sd.codServizio)+"LTR";
		
// nome simbolico della PA
String paSymName(EJBPABinding ejbpa, ServiceDef sd, SOABEModel model):
    model.codComponente+"."+toCamel(sd.codServizio)+"PA";

// posizione nel project svn delle configurazioni della singola PA
String paConfigDir(ServiceDef sd, SOABEModel model) :
	getSpecificEjbConfigRootDir(removeSeparator(sd.codServizio), model);

// è necessario differenziare con il codServ per evitare sovrapposizioni nel classloading
String paDefFileName(EJBPABinding pa, ServiceDef sd) :
    "defpa_"+removeSeparator(sd.codServizio)+".xml";

String qmgrDefFileName(ServiceDef sd) :
    "defqmgr_"+removeSeparator(sd.codServizio)+".xml";

String pdEJBDefFileName(EJBPABinding pa, ServiceDef sd) :
	"defpd_"+removeSeparator(sd.codServizio)+".xml";

String pdSOAPDefFileName(SOAPPABRBinding pa, ServiceDef sd) :
	"defpd_"+removeSeparator(sd.codServizio)+"soap.xml";
	
String registryPDFileName(ServiceDef sd, ServiceBinding binding) :
	"defpd_"+removeSeparator(sd.codServizio)+"_"+binding.codBinding.toLowerCase()+".xml";
	
// da 6.1.4 linee guida soa: nome dell'ejb del serivizo è nome del metodo. Per semplicità 
// invece del nome dell'ejb metto il codice servizio (da sottomettere la richiesta di variazione standard)
String svcflowDefinitionFileName(Operation op, String codServizio) :
	removeSeparator(codServizio)+op.name.toFirstUpper()+".xml";
	
///// NAMING JNDI e WEB
String fullPAJndiName(ServiceDef sd, SOABEModel model) :
    model.codComponente+".ejb."+toCamel(sd.serviceType.toString())+toCamel(sd.codServizio)+"PA";

String fullQMGRJndiName(ServiceDef sd, SOABEModel model) :
    model.codComponente+".ejb."+toCamel(sd.serviceType.toString())+toCamel(sd.codServizio)+"QMGR";
    

/// in realtà non dovrebbe servire...
String fullLTRJndiName(ServiceDef sd, SOABEModel model) :
    model.codComponente+".ejb."+toCamel(sd.serviceType.toString())+toCamel(sd.codServizio)+"LTR";
    
String fullServiceJndiName(EJBPABinding sb, ServiceDef sd, SOABEModel model) :
    model.codComponente+".ejb."+toCamel(sd.codServizio)+"Srv";    

// da http://dsp.csi.it/dsp/opencms/dsp/it/standard/standard/docs/DSP_STD_0000_GUI_150606_V01_NamingOggettiJ2EE.pdf
// § 3.4.1
String queueConnectionFactoryJndiName() :
	"jms/QueueConnectionFactory";
// da http://dsp.csi.it/dsp/opencms/dsp/it/standard/standard/docs/DSP_STD_0000_GUI_150606_V01_NamingOggettiJ2EE.pdf
// § 3.4.1
String topicConnectionFactoryJndiName() :
	"jms/TopicConnectionFactory";
		
// da http://dsp.csi.it/dsp/opencms/dsp/it/standard/standard/docs/DSP_STD_0000_GUI_150606_V01_NamingOggettiJ2EE.pdf
// § 3.4.2.2
// nota: uso '.' invece che '/' perchè le librerie lo cercano col punto...
String  paQueueJndiName(ServiceDef sd, String codBinding, SOABEModel model) :
	model.codComponente.toLowerCase()+".jms."+toCamel(sd.codServizio)+"PAQueue";
	
// da http://dsp.csi.it/dsp/opencms/dsp/it/standard/standard/docs/DSP_STD_0000_GUI_150606_V01_NamingOggettiJ2EE.pdf
// § 3.4.3
String  paTopicJndiName(ServiceDef sd, SOABEModel model) :
	model.codComponente.toLowerCase()+"/jms/"+toCamel(sd.codServizio)+"Topic";

String counterDSJndiName(ServiceDef sd, SOABEModel model) :
	model.codComponente.toLowerCase()+"/jdbc/Counter"+toCamel(sd.codServizio)+"TxDS";
	 	
// tolto dal context l'ulteriore suffisso pabrsoap perchè appesantiva il context
// senza dare valore aggiunto (il cod binding dovrebbe già discriminare)
String pabrWebContext(String codServ, String codBinding, String serviceType, SOABEModel model) :
	model.codComponente.toLowerCase()+toCamel(serviceType.toString())+toCamel(removeSeparator(codServ))+codBinding.toLowerCase().toFirstUpper();

// tolto dal context l'ulteriore suffisso wsfad perchè appesantiva il context
// senza dare valore aggiunto (il cod binding dovrebbe già discriminare)
String wsfadWebContext(String codServ, String codBinding, String serviceType, SOABEModel model) :
	model.codComponente.toLowerCase()+toCamel(serviceType.toString())+toCamel(removeSeparator(codServ))+codBinding.toLowerCase().toFirstUpper();
    
String asynchCounterTableName(ServiceDef sd) :
	removeSeparator(sd.codServizio).toUpperCase()+"_COUNTER";    

/// NAMING PACCHETTI
String getEJBPAJarName(String codServ, String codBinding, String srvType, SOABEModel model) :
	srvType+"-"+removeSeparator(codServ)+"-"+codBinding.toLowerCase()+".jar";

String getPABRWarName(String codServ, String codBinding, String srvType, SOABEModel model) :
	srvType+"-"+removeSeparator(codServ)+"-"+codBinding.toLowerCase()+".war";

String getWSFADWarName(String codServ, String codBinding, String srvType, SOABEModel model) :
	srvType+"-"+removeSeparator(codServ)+"-"+codBinding.toLowerCase()+".war";


///// ALTRI STANDARD

// tipo operazione csi
String opTypeConst(OpTypeEnum optype) :
  if (optype == servicedef::OpTypeEnum::synch)then
    "synch-call"
  else if(optype == servicedef::OpTypeEnum::asynch)then
    "asynch-call"
  else if(optype == servicedef::OpTypeEnum::notify)then
    "notify";

/// mapping di tipi model -> java
String map2javaSimpleType(Type type) :
	let code = ((CSIDatatype)type).code :
	let nillable =  ((CSIDatatype)type).nillable :
	if (code == typedef::CSIDatatypeCodes::CSIInteger) then
  	(nillable ? "java.lang.Integer" : "int")
	else if (code == typedef::CSIDatatypeCodes::CSIString) then
  	(nillable ? "java.lang.String" : "java.lang.String")
	else if (code == typedef::CSIDatatypeCodes::CSIFloat) then
  	(nillable ? "java.lang.Float" : "float")
  	else if (code == typedef::CSIDatatypeCodes::CSILong) then
  	(nillable ? "java.lang.Long" : "long")
	else if (code == typedef::CSIDatatypeCodes::CSIDouble) then
  	(nillable ? "java.lang.Double" : "double")
	else if (code == typedef::CSIDatatypeCodes::CSIBoolean) then
  	(nillable ? "java.lang.Boolean" : "boolean")
	else if (code == typedef::CSIDatatypeCodes::CSIDate) then
  	(nillable ? "java.util.Date" : "java.util.Date")
	else if (code == typedef::CSIDatatypeCodes::CSIByte) then
  	(nillable ? "byte" : "byte")
	else 
  	"???";

String map2javaType(Type type, String codServ, SOABEModel model) :
if (type==null) then
	"void"
else if (type.metaType==CSIDatatype) then
	map2javaSimpleType(type)
else if (type.metaType==Entity) then
      fullQualifiedEntitiesPkg(codServ, model)+"."+type.name.toFirstUpper() 
else 
	map2javaType(((TypedArray)type).componentType, codServ, model)+"[]";

String defaultInitVal(Type type) :
	if(type==null) then
	  "null"
	else if(type.metaType==CSIDatatype) then
	  defaultSimpleInitVal(type)
	else
	  "null";

String defaultSimpleInitVal(Type type) :
let code = ((CSIDatatype)type).code :
	let nillable =  ((CSIDatatype)type).nillable :
	if (code == typedef::CSIDatatypeCodes::CSIInteger) then
  	(nillable ? "null" : "0")
	else if (code == typedef::CSIDatatypeCodes::CSIString) then
  	(nillable ? "null" : "null")
	else if (code == typedef::CSIDatatypeCodes::CSIFloat) then
  	(nillable ? "null" : "0")
  	else if (code == typedef::CSIDatatypeCodes::CSILong) then
  	(nillable ? "null" : "0")
	else if (code == typedef::CSIDatatypeCodes::CSIDouble) then
  	(nillable ? "null" : "0")
	else if (code == typedef::CSIDatatypeCodes::CSIBoolean) then
  	(nillable ? "null" : "true")
	else if (code == typedef::CSIDatatypeCodes::CSIDate) then
  	(nillable ? "null" : "null")
	else if (code == typedef::CSIDatatypeCodes::CSIByte) then
  	(nillable ? "0" : "0")
	else 
  	"???";
  	
  	
//// altre utility

String getRegionUID(String src) : JAVA
  it.csi.mddtools.servicegen.genutils.CodeGenerationUtils.getRegionUID(java.lang.String);
  
String removeSeparator(String src) : JAVA
  it.csi.mddtools.servicegen.genutils.CodeGenerationUtils.removeSeparator(java.lang.String);

String toCamel(String src) : JAVA
  it.csi.mddtools.servicegen.genutils.CodeGenerationUtils.toCamel(java.lang.String);

boolean validateCodServ(String src) : JAVA
  it.csi.mddtools.servicegen.genutils.CodeGenerationUtils.validateCodServ(java.lang.String);    