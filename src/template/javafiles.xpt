«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT servicegen»
«IMPORT servicedef»
«IMPORT typedef»
«IMPORT template::javavalidator»

«EXTENSION template::ServicegenExtensions»


«REM»
***************************************************************
Metodo centralizzato per la generazione delle classi dei servizi
***************************************************************
«ENDREM»
«DEFINE serviceFiles(SOABEModel model)FOR servicedef::ServiceDef»
	«REM»File del servizio«ENDREM»
	«EXPAND javaCsiInterfaceFile (model) FOR this»
	«EXPAND javaEJBServiceRemoteInterfaceFile(model) FOR this»
	«EXPAND javaEJBServiceHomeInterfaceFile(model) FOR this»
	«EXPAND javaEJBServiceBeanFile(model, this.getServiceImpl(model)) FOR this»
	«REM»«EXPAND javavalidator::validatorFH(model) FOR this»«ENDREM»

	«REM»Files della implementation cartridge«ENDREM»
	«IF this.serviceType==SrvTypeEnum::orch»
		«EXPAND javaOrchServiceDelegateClassFile(model) FOR this»
		«EXPAND svcflowFiles(model, "csi") FOR this»
	«ELSE»
		«EXPAND javaServiceDelegateClassFile(model) FOR this»
	«ENDIF»

	«REM»File per test«ENDREM»
	«EXPAND javaServiceTestClassFile(model) FOR this»
«ENDDEFINE»



«REM»
==========================================================================================================================
Interfaccia pubblica del servizio C.S.I
==========================================================================================================================
«ENDREM»

«DEFINE javaCsiInterfaceFile (SOABEModel model)FOR servicedef::ServiceDef»
«FILE fullServiceInterfaceDir(codServizio, model)+"/"+serviceInterfaceName()+".java" »
package «fullQualifiedServiceInterfacePkg(model)»;

«IF this.types.types.select(t|t.metaType== Entity)!=null»
import «fullQualifiedEntitiesPkg(codServizio, model)».*;
«ENDIF»
«IF this.types.types.select(t|t.metaType== Exception)!=null»
import «fullQualifiedServiceExceptionPkg(codServizio, model)».*;
«ENDIF»
  «PROTECT CSTART '////{' CEND '////}' ID getRegionUID("doc"+model.codComponente+codServizio)»
  /**
   * Inserire qui la documentazione dell'interfaccia pubblica del servizio «codServizio».
   * Consigli:
   * <ul>
   * <li> Descrivere qual'&egrave; lo scopo generale del servizio
   * <li> Se necessario fornire una overview delle funzioni messe a disposizione
   *      eventualmente raggruppandole logicamente. Il dettaglio dei singoli
   *      metodi va documentato in corrispondenza dei metodi stessi
   * <li> Se necessario descrivere gli scenari di utilizzo pi&ugrave; frequenti, ovvero
   *      le "coreografie" (nel caso sia necessario richiamare in una sequenza
   *      particolare i metodi
   * <li> Inserire informazioni quali il livello di securizzazione A0-A3
   * <li> Inserire varie ed eventuali... 
   * </ul>
   * @generated
   */
  «ENDPROTECT»
public interface «serviceInterfaceName()»{
	«EXPAND operationDeclaration (model, codServizio)FOREACH this.operations»
	«IF this.monitorable»
	/**
	 * @generated
	 */
	public boolean testResources() throws  it.csi.csi.wrapper.CSIException;
	«ENDIF»
	«IF this.diagEnabled»
	/**
	 * @generated
	 */
	public it.csi.coopdiag.api.InvocationNode selfCheck( it.csi.coopdiag.api.CalledResource[] alreadyChecked ) throws it.csi.csi.wrapper.CSIException;
	
	/**
	 * @generated
	 */
	public boolean hasSelfCheck() throws it.csi.csi.wrapper.CSIException;
	«ENDIF»
}
	«ENDFILE»
«ENDDEFINE»

«DEFINE operationDeclaration (SOABEModel model, String codServ) FOR Operation»
  «PROTECT CSTART '////{' CEND '////}' ID getRegionUID("doc"+model.codComponente+codServ+name)»
  /**
   * Inserire qui la documentazione del metodo «name».
   * Descrivere dettagliatamente:
   * <ul>
   * <li>la semantica del metodo (facendo riferimento ai parametri). E' importante 
   *     elencare casi particolari (dati non trovati, ecc...)
   * <li> i singoli parametri (nelle sezioni apposite sottostanti): &egrave; importante
   *      indicare:
   *      <ul>
   *      <li>se il parametro &egrave; obbligatorio
   *      <li>se ci sono dei vincoli sulla valorizzazione (es. range numerico,
   *          dimensioni massime in caso di stringa o tipo array, eventuale necessit&agrave;
   *          di corrispondenza con una particolare codifica, che pu&ograve; essere prefissata
   *          (es. da un elenco predefinito) oppure dinamica (presente su un archivio
   *          di un'applicazione)
   *      </ul>
   * <li> le eccezioni rilanciate (nelle sezioni apposite sottostanti)
   * <li> il tipo di ritorno
   * </ul>
   «FOREACH params AS par»
   * @param «par.name» [documentazione del parametro (vedere sopra per consigli sulla documentazione)]
   	«REM»«EXPAND paramConstraintsDoc FOR par»«ENDREM»
   «ENDFOREACH»
   * @return «map2javaType(this.returnType, codServ, model)»
   «FOREACH throws AS exc»
   * @throws «exc.name»
   «ENDFOREACH»
   * @throws CSIException (eccezione base rilanciata dall'infrastruttura di cooperazione)
   * @throws SystemException in caso di errore di sistema (connessione, comunicazione, ecc.)
   * @throws UnrecoverableException in caso di errore imprevisto e non recuperabile
   * @generated
   */
  «ENDPROTECT»
  public «map2javaType(this.returnType,codServ, model)» «this.name» (
    «IF params != null && params.size > 0»
    	«IF params.size==1»
    		«EXPAND paramDef (model,codServ,false) FOREACH params.select(e|e==params.last())»
    	«ELSE»
    		«EXPAND paramDef (model,codServ,true) FOREACH params.select(e|e!=params.last())»
    		«EXPAND paramDef (model,codServ,false) FOREACH params.select(e|e==params.last())»
    	«ENDIF»	
    «ENDIF»
    «IF this.opType != OpTypeEnum::synch»«IF params!=null && params.size>0»,«ENDIF» it.csi.csi.util.DatiMessaggio datiMsg«ENDIF»
  )
  throws
  	it.csi.csi.wrapper.CSIException, it.csi.csi.wrapper.SystemException, it.csi.csi.wrapper.UnrecoverableException 
  «EXPAND exceptionInThrowsClause(model,codServ) FOREACH throws»;
«ENDDEFINE»

«REM»documenta i constraint sul parametro
«DEFINE paramConstraintsDoc FOR Param»
   «LET this.validator AS validator»
   «LET validator.constraint AS ctr»
   «formatConstraint(validator)»
   «ENDLET»
   «ENDLET»
«ENDDEFINE»
«ENDREM»

«DEFINE operationDeclaration4Remote (SOABEModel model, String codServ) FOR Operation»
  /**
   * @generated
   */
  public «map2javaType(this.returnType,codServ,model)» «this.name» (
    «IF params != null && params.size > 0»
    	«IF params.size==1»
    		«EXPAND paramDef (model,codServ,false) FOREACH params.select(e|e==params.last())»
    	«ELSE»
    		«EXPAND paramDef (model,codServ,true) FOREACH params.select(e|e!=params.last())»
    		«EXPAND paramDef (model,codServ,false) FOREACH params.select(e|e==params.last())»
    	«ENDIF»	
    «ENDIF»
    «IF this.opType != OpTypeEnum::synch»«IF params!=null && params.size>0»,«ENDIF» it.csi.csi.util.DatiMessaggio datiMsg«ENDIF»
  )
  throws
  	it.csi.csi.wrapper.CSIException, it.csi.csi.wrapper.SystemException, it.csi.csi.wrapper.UnrecoverableException,
  	java.rmi.RemoteException
  «EXPAND exceptionInThrowsClause(model,codServ) FOREACH throws»;
«ENDDEFINE»

«DEFINE paramDef (SOABEModel model, String codServ, boolean addComma) FOR Param»
	«map2javaType(this.type,codServ,model)» «name»«IF addComma»,«ENDIF»
«ENDDEFINE»

«DEFINE exceptionInThrowsClause (SOABEModel model,String codServ)FOR Exception»
  ,«map2JavaTypeSDRelative(this)»
«ENDDEFINE»



«REM»
==========================================================================================================================
Interfaccia remota dell'EJB che implementa il servizio
==========================================================================================================================
«ENDREM»

«DEFINE javaEJBServiceRemoteInterfaceFile (SOABEModel model) FOR servicedef::ServiceDef»
«FILE fullServiceEJBClassesDir(codServizio, model)+"/"+serviceRemoteInterfaceName()+".java" »
package «getFullServiceEJBPkg(codServizio, model)»;
«IF this.types.types.select(t|t.metaType== Entity)!=null»
import «fullQualifiedEntitiesPkg(codServizio, model)».*;
«ENDIF»
«IF this.types.types.select(t|t.metaType== Exception)!=null»
import «fullQualifiedServiceExceptionPkg(codServizio, model)».*;
«ENDIF»
/**
 * Interfaccia remota dell'EJB che implementa il servizio «this.codServizio».
 * @generated
 */
public interface «serviceRemoteInterfaceName()» extends javax.ejb.EJBObject{
	«EXPAND operationDeclaration4Remote (model,codServizio)FOREACH this.operations»
	«IF this.monitorable»
	/**
	 * @generated
	 */
	public boolean testResources() throws  it.csi.csi.wrapper.CSIException,java.rmi.RemoteException;
	«ENDIF»
	
	«IF this.diagEnabled»
	/**
	 * @generated
	 */
	public it.csi.coopdiag.api.InvocationNode selfCheck( it.csi.coopdiag.api.CalledResource[] alreadyChecked ) throws it.csi.csi.wrapper.CSIException,java.rmi.RemoteException;
	
	/**
	 * @generated
	 */
	public boolean hasSelfCheck() throws it.csi.csi.wrapper.CSIException,java.rmi.RemoteException;
	«ENDIF»
}
	«ENDFILE»
	
	«FILE fullServiceEJBClassesDir(codServizio, model)+"/"+serviceLocalInterfaceName()+".java" »
package «getFullServiceEJBPkg(codServizio, model)»;
«IF this.types.types.select(t|t.metaType== Entity)!=null»
import «fullQualifiedEntitiesPkg(codServizio, model)».*;
«ENDIF»
«IF this.types.types.select(t|t.metaType== Exception)!=null»
import «fullQualifiedServiceExceptionPkg(codServizio, model)».*;
«ENDIF»

/**
 * Interfaccia locale dell'EJB che implementa il servizio «this.codServizio».
 * @generated
 */
public interface «serviceLocalInterfaceName()» extends javax.ejb.EJBLocalObject, «fullQualifiedServiceInterfaceName(model)»{
	«IF this.monitorable»
	/**
	 * @generated
	 */
	public boolean testResources() throws  it.csi.csi.wrapper.CSIException;
	«ENDIF»
	
	«IF this.diagEnabled»
	/**
	 * @generated
	 */
	public it.csi.coopdiag.api.InvocationNode selfCheck( it.csi.coopdiag.api.CalledResource[] alreadyChecked ) throws it.csi.csi.wrapper.CSIException;
	
	/**
	 * @generated
	 */
	public boolean hasSelfCheck() throws it.csi.csi.wrapper.CSIException;
	«ENDIF»
}
	«ENDFILE»	
«ENDDEFINE»



«REM»
==========================================================================================================================
Home interface dell'EJB che implementa il servizio
==========================================================================================================================
«ENDREM»

«DEFINE javaEJBServiceHomeInterfaceFile (SOABEModel model)FOR ServiceDef»
«FILE fullServiceEJBClassesDir(codServizio, model)+"/"+serviceHomeInterfaceName()+".java" »
package «getFullServiceEJBPkg(codServizio, model)»;

import java.rmi.*;
import javax.ejb.*;

/**
 * @generated
 */
public interface «serviceHomeInterfaceName()» extends EJBHome{
    /**
	 * @generated
	 */
	public «serviceRemoteInterfaceName()» create() throws RemoteException, CreateException;
}
«ENDFILE»

«FILE fullServiceEJBClassesDir(codServizio, model)+"/"+serviceLocalHomeInterfaceName()+".java" »
package «getFullServiceEJBPkg(codServizio, model)»;

import java.rmi.*;
import javax.ejb.*;

/**
 * @generated
 */
public interface «serviceLocalHomeInterfaceName()» extends EJBLocalHome{
    /**
	 * @generated
	 */
	public «serviceLocalInterfaceName()» create() throws CreateException;
}
«ENDFILE»
«ENDDEFINE»



«REM»
==========================================================================================================================
Classe dell'EJB che implementa il servizio (tramite delegate)
==========================================================================================================================
«ENDREM»

«DEFINE javaEJBServiceBeanFile (SOABEModel model, ServiceImpl serviceImpl)FOR ServiceDef»
	«LET getServiceImpl(this,model) AS impl-»
		«IF impl !=null-»
			«LET (ServiceComponent)(impl.serviceComponent) AS sc»
				«LET (LogicImplCartridge)(impl.implCartridge) AS crt»
					«IF crt==null || crt.metaType==ManualImplCartridge»
						«EXPAND template::manualimpl::javafiles::javaEJBServiceBeanFile(model,impl) FOR this»
					«ELSEIF crt!=null && crt.metaType==FlowModelImplCartridge»
						«EXPAND template::flowmodel::javafiles::javaEJBServiceBeanFile(model) FOR this»
					«ELSE»
						«ERROR "tipo di cartridge non gestita per implementazione "+impl»
					«ENDIF»
				«ENDLET-»
			«ENDLET-»
		«ELSE-»
			«ERROR "la definizione di servizio "+this+" non ha implementazione"»		
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE operationDelegation (SOABEModel model,String codServ, ServiceDef sd) FOR Operation»
  /**
   * @generated
   */
  public «map2javaType(this.returnType,codServ,model)» «this.name» (
    «IF params != null && params.size > 0»
    	«IF params.size==1»
    		«EXPAND paramDef (model,codServ,false) FOREACH params.select(e|e==params.last())»
    	«ELSE»
    		«EXPAND paramDef (model,codServ,true) FOREACH params.select(e|e!=params.last())»
    		«EXPAND paramDef (model,codServ,false) FOREACH params.select(e|e==params.last())»
    	«ENDIF»	
    «ENDIF»
    «IF this.opType != OpTypeEnum::synch»«IF params!=null && params.size>0»,«ENDIF» it.csi.csi.util.DatiMessaggio datiMsg«ENDIF»
  )
  throws
  	it.csi.csi.wrapper.CSIException, it.csi.csi.wrapper.SystemException, it.csi.csi.wrapper.UnrecoverableException
  «EXPAND exceptionInThrowsClause(model,codServ) FOREACH throws»
  {
     try{
     	
     	logger.debug("[«serviceBeanClassName(codServ)»::«this.name»()] - START");
     	it.csi.util.performance.StopWatch watcher= new it.csi.util.performance.StopWatch("«model.codComponente»");
	 // inizio misurazione
	    watcher.start();
	    
	    «IF this.returnType != null»
	    «map2javaType(this.returnType,codServ,model)» valueObjRet = 
	    delegate.«this.name»(
     		«IF params.size != 0»
     			«IF params.size==1»
    				«EXPAND paramPassSameName(false) FOREACH params.select(e|e==params.first())»
    			«ELSE»
	    			«EXPAND paramPassSameName(true) FOREACH params.select(e|e!=params.last())»
    				«EXPAND paramPassSameName(false) FOREACH params.select(e|e==params.last())»
    			«ENDIF»
    		«ENDIF»
    		«IF this.opType != OpTypeEnum::synch», datiMsg«ENDIF»
    		«IF sd.authLevel != AuthLevelEnum::A0»«IF this.params.size>0», «ENDIF»ctx.getCallerPrincipal()«ENDIF»
    	);
    	
    	«ELSE»
    	delegate.«this.name»(
     		«IF params.size != 0»
     			«IF params.size==1»
    				«EXPAND paramPassSameName(false) FOREACH params.select(e|e==params.first())»
    			«ELSE»
	    			«EXPAND paramPassSameName(true) FOREACH params.select(e|e!=params.last())»
    				«EXPAND paramPassSameName(false) FOREACH params.select(e|e==params.last())»
    			«ENDIF»
    		«ENDIF»
    		«IF this.opType != OpTypeEnum::synch», datiMsg«ENDIF»
    		«IF sd.authLevel != AuthLevelEnum::A0»«IF this.params.size>0», «ENDIF»ctx.getCallerPrincipal()«ENDIF»
    	);
    	
    	«ENDIF»
    	
    	// fine misurazione
       watcher.stop();
	   watcher.dumpElapsed("«serviceBeanClassName(codServ)»","«this.name»()", "invocazione servizio [«removeSeparator(codServ)»]::[«name»]", "(valore input omesso)");
	   logger.debug("[«serviceBeanClassName(codServ)»::«this.name»()] - END");
	    
     	«IF this.returnType != null»
     	  return valueObjRet;
     	«ENDIF»
     	
    	
    	
    }
    catch(CSIException e){
    	«IF this.txType!=TXTypeEnum::noTX»
    	ctx.setRollbackOnly();
    	«ENDIF»
		throw e;
	}
    catch(Exception e){
    «IF this.txType!=TXTypeEnum::noTX»
    	ctx.setRollbackOnly();
    «ENDIF»
    	throw new UnrecoverableException("Errore non recuperabile durante l'esecuzione del metodo:"+e,e);
    }
  }
«ENDDEFINE»

«DEFINE paramPassSameName(boolean addComma) FOR Param»
«name»«IF addComma»,«ENDIF»
«ENDDEFINE»



«REM»
==========================================================================================================================
SERVICE DELEGATE CLASSES
==========================================================================================================================
«ENDREM»

«REM»
***************************************************************
classe del 'delegate' che implementa effettivamente il servizio
(l'implementazione dei metodi di business va qui dentro).
In caso di livello di sicurezza > A0 viene aggiunto un parametro
che conterrà il principal derivante dal SessionContext [STDAPS-82]
***************************************************************
«ENDREM»
«DEFINE javaServiceDelegateClassFile(SOABEModel model) FOR ServiceDef»
	«LET getServiceImpl(this,model) AS impl-»
		«IF impl !=null-»
			«LET impl.serviceComponent AS sc»
				«LET impl.implCartridge AS crt»
					«IF crt==null || crt.metaType==ManualImplCartridge»
						«EXPAND template::manualimpl::javafiles::javaServiceDelegateClassFile(model) FOR this»
					«ELSEIF crt!=null && crt.metaType==FlowModelImplCartridge»
						«EXPAND template::flowmodel::javafiles::javaServiceDelegateClassFile(model) FOR this»
					«ELSE»
						«ERROR "tipo di cartridge non gestita per implementazione "+impl»
					«ENDIF»
				«ENDLET-»
			«ENDLET-»
		«ELSE-»
			«ERROR "la definizione di servizio "+this+" non ha implementazione"»		
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»

«REM»
***************************************************************
classe del 'delegate' che implementa effettivamente il servizio
(l'implementazione dei metodi di business va qui dentro)
***************************************************************
«ENDREM»
«DEFINE javaOrchServiceDelegateClassFile(SOABEModel model) FOR ServiceDef»
	«LET getServiceImpl(this,model) AS impl-»
		«IF impl !=null-»
			«LET impl.serviceComponent AS sc»
				«LET impl.implCartridge AS crt»
					«IF crt==null || crt.metaType==ManualImplCartridge»
						«EXPAND template::manualimpl::javafiles::javaOrchServiceDelegateClassFile(model) FOR this»
					«ELSEIF crt!=null && crt.metaType==FlowModelImplCartridge»
						«EXPAND template::flowmodel::javafiles::javaOrchServiceDelegateClassFile(model) FOR this»
					«ELSE»
						«ERROR "tipo di cartridge non gestita per implementazione "+impl»
					«ENDIF»
				«ENDLET-»
			«ENDLET-»
		«ELSE-»
			«ERROR "la definizione di servizio "+this+" non ha implementazione"»		
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»



«REM»
==========================================================================================================================
Test junit del servizio
==========================================================================================================================
«ENDREM»

«DEFINE javaServiceTestClassFile (SOABEModel model)FOR ServiceDef»
«FILE fullServiceTestClassesDir(codServizio, model)+"/"+serviceTestClassName()+".java"»
package «getFullServiceTestPkg(codServizio,model)»;

import it.csi.csi.wrapper.SystemException;
import it.csi.csi.wrapper.UnrecoverableException;
«IF this.types.types.select(t|t.metaType== Entity)!=null»
import «fullQualifiedEntitiesPkg(codServizio, model)».*;
«ENDIF»
import «fullQualifiedServiceInterfacePkg(model)».*;
«IF this.types.types.select(t|t.metaType== Exception)!=null»
import «fullQualifiedServiceExceptionPkg(codServizio, model)».*;
«ENDIF»
import it.csi.csi.util.xml.*;
import it.csi.csi.porte.*;
import it.csi.csi.porte.proxy.*;
import javax.sql.DataSource;
import org.apache.log4j.*;
import junit.framework.TestCase;

«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("testExtraImport"+codServizio)»
/// inserire qui eventuali import aggiuntive
«ENDPROTECT»

/**
 * @generated
 */
public class «serviceTestClassName()» extends TestCase{
    
    /**
	 * @generated
	 */
	public static final String LOGGER_PREFIX = "«getLoggerPrefixForComponent(model.codProdotto,model.codComponente)»";
	
	/**
	 * @generated
	 */
	«fullQualifiedServiceInterfaceName(model)» pd = null;
	
	/**
	 * @generated
	 */
	public void setUp() throws Exception{
		InfoPortaDelegata info = PDConfigReader.read("test/java/test/«removeSeparator(codServizio)+"/"+pdEJBDefFileName(this.bindings.typeSelect(EJBPABinding).first(),this)»");
		pd = («fullQualifiedServiceInterfaceName(model)»)
			PDProxy.newInstance(info);
	}
	
	
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("testLocalVars"+codServizio)»
	// inserire qui la definizione di variabili locali, costanti da usare nel test.
	// non verranno sovrascritte da successive rigenerazioni
	«ENDPROTECT»
	
	
	/// Implementazione operazioni esposte dal servizio
	
	«EXPAND operationTestDeclaration (model, codServizio)FOREACH this.operations»
	
	«IF this.monitorable»
	/**
	 * @generated
	 */
	public void testTestResources(){
		try{
			pd.testResources();
		}
		catch(Exception e){
			fail(e.getMessage());
		}
	}
	«ENDIF»
	«IF this.diagEnabled»
	/**
	 * @generated
	 */
	public void testSelfCheck(){
		try{
			pd.selfCheck(null);
		}
		catch(Exception e){
			fail(e.getMessage());
		}
	}
	«ENDIF»
	/**
	 * @generated
	 */
	protected Logger getLogger(String subsystem){
	  if (subsystem!=null)
	  	return Logger.getLogger(LOGGER_PREFIX+"."+subsystem);
	  else
	    return Logger.getLogger(LOGGER_PREFIX);
	}
	
	/// eventuali metodi aggiuntivi
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("test"+codServizio+"OtherMethods"+codServizio)»
	// inserire qui la dichiarazione di eventuali metodi aggiuntivi utili
	// per l'implementazione.
	// non verra' sovrascritto da successive rigenerazioni.
	«ENDPROTECT»
}
	«ENDFILE»
«ENDDEFINE»

«DEFINE operationImplementation(SOABEModel model, String codServ, String implClassName, ServiceDef sd) FOR Operation»
	«LET getServiceImpl(sd,model) AS impl-»
		«IF impl !=null-»
			«LET impl.serviceComponent AS sc»
				«LET impl.implCartridge AS crt»
					«IF crt==null || crt.metaType==ManualImplCartridge»
						«EXPAND template::manualimpl::javafiles::operationImplementation(model, codServ, implClassName, sd) FOR this»
					«ELSEIF crt!=null && crt.metaType==FlowModelImplCartridge»
						«EXPAND template::flowmodel::javafiles::operationImplementation(model, codServ, implClassName, sd) FOR this»
					«ELSE»
						«ERROR "tipo di cartridge non gestita per implementazione "+impl»
					«ENDIF»
				«ENDLET-»
			«ENDLET-»
		«ELSE-»
			«ERROR "la definizione di servizio "+this+" non ha implementazione"»		
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE operationOrchImplementation(SOABEModel model, String codServ, String implClassName, ServiceDef sd) FOR Operation»
	«LET getServiceImpl(sd,model) AS impl-»
		«IF impl !=null-»
			«LET impl.serviceComponent AS sc»
				«LET impl.implCartridge AS crt»
					«IF crt==null || crt.metaType==ManualImplCartridge»
						«EXPAND template::manualimpl::javafiles::operationOrchImplementation(model, codServ, implClassName, sd) FOR this»
					«ELSEIF crt!=null && crt.metaType==FlowModelImplCartridge»
						«EXPAND template::flowmodel::javafiles::operationOrchImplementation(model, codServ, implClassName, sd) FOR this»
					«ELSE»
						«ERROR "tipo di cartridge non gestita per implementazione "+impl»
					«ENDIF»
				«ENDLET-»
			«ENDLET-»
		«ELSE-»
			«ERROR "la definizione di servizio "+this+" non ha implementazione"»		
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»

«DEFINE operationTestDeclaration(SOABEModel model,String codServ) FOR Operation»
	/**
	 * @generated
	 */
	public void testOperation«name.toFirstUpper()»(){
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("test_"+codServ+"_"+name) »
	/// inserire qui la logica di test per l'operazione.
	/// il codice sara' preservato per successive rigenerazioni
	«ENDPROTECT»
	}
«ENDDEFINE»



«REM»
==========================================================================================================================
DATA TYPES GENERATION
==========================================================================================================================
«ENDREM»

«DEFINE typedefs (SOABEModel model,String codServ) FOR Types»
	«EXPAND javaEntityClass(model,codServ) FOREACH (List[Entity])this.types.select(e|e.metaType==Entity && !e.isTypedefAnnotated())»
	«EXPAND javaExceptionClass(model,codServ) FOREACH (List[Exception])this.types.select(e|e.metaType==Exception && !e.isTypedefAnnotated())»
«ENDDEFINE»


«REM»
***************************************************************
classe dei dto (entity) usate nella signature del servizio
***************************************************************
«ENDREM»
«DEFINE javaEntityClass(SOABEModel model,String codServ) FOR Entity»
«FILE fullEntitiesDir(codServ, model)+"/"+name+".java"»
package «fullQualifiedEntitiesPkg(codServ, model)»;

  «PROTECT CSTART '////{' CEND '////}' ID getRegionUID("doc"+model.codComponente+codServ+name)»
  /**
   * Inserire qui la documentazione della classe «name».
   * Consigli:
   * <ul>
   * <li> Descrivere il "concetto" rappresentato dall'entita' (qual'&egrave; l'oggetto
   *      del dominio del servizio rappresentato)
   * <li> Se necessario indicare se questo concetto &egrave; mantenuto sugli archivi di
   *      una particolare applicazione
   * <li> Se l'oggetto ha un particolare ciclo di vita (stati, es. creato, da approvare, 
   *      approvato, respinto, annullato.....) si pu&ograve; decidere di descrivere
   *      la state machine qui o nella documentazione dell'interfaccia del servizio
   *      che manipola quest'oggetto
   * </ul>
   * @generated
   */
  «ENDPROTECT»
public class «name» implements java.io.Serializable {
	// il serial version UID e' impostato in base a quanto configurato nel modello
	/**
	 * @generated
	 */
	static final long serialVersionUID = «this.versionuid»;
	
«EXPAND featureDef (model,codServ,name) FOREACH features»

«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(codServ+name+"customToStringAndCo")»
	/// inserire qui eventuali ridefinizioni di toString, hashCode, equals
«ENDPROTECT»
}

«ENDFILE»	
«ENDDEFINE»

«DEFINE featureDef (SOABEModel model, String codServ, String ownerName) FOR Feature»
	/**
	 * @generated
	 */
	private «map2javaType(type,codServ,model)» «name» = «defaultInitVal(type)»;
	
	/**
	 * @generated
	 */
	public void set«name.toFirstUpper()»(«map2javaType(type,codServ,model)» val){
		«name» = val;
	}
	
	«PROTECT CSTART '////{' CEND '////}' ID getRegionUID("doc"+model.codComponente+codServ+ownerName+name)»
  	/**
   	 * Inserire qui la documentazione dell'attributo «name». 
   	 * Descrivere:
   	 * <ul>
	 *      <li>se l'attributo deve essere sempre valoriuzzato o meno
	 *      <li>se ci sono dei vincoli sulla valorizzazione (es. range numerico,
     *          dimensioni massime in caso di stringa o tipo array, eventuale necessit&agrave;
     *          di corrispondenza con una particolare codifica, che pu&ograve; essere prefissata
     *          (es. da un elenco predefinito) oppure dinamica (presente su un archivio
     *          di un'applicazione)
     *      <li>se ci sono particolari vincoli di valorizzazione relativi al valore di
     *          altri attributi della stessa classe.
     *      <li>...
     *      </ul>
     * @generated 
   	 */
  	«ENDPROTECT»
	public «map2javaType(type,codServ,model)» get«name.toFirstUpper()»(){
		return «name»;
	}
«ENDDEFINE»


«REM»
***************************************************************
classe delle eccezioni custom
***************************************************************
«ENDREM»
«DEFINE javaExceptionClass (SOABEModel model,String codServ)FOR Exception»
«FILE fullServiceExceptionsDir(codServ, model)+"/"+name+".java"»
package «fullQualifiedServiceExceptionPkg(codServ, model)»;

import it.csi.csi.wrapper.SystemException;
import it.csi.csi.wrapper.UserException;
import it.csi.csi.wrapper.UnrecoverableException;

«PROTECT CSTART '////{' CEND '////}' ID getRegionUID("doc"+model.codComponente+codServ+name)»
  /**
   * Inserire qui la documentazione dell'eccezione «name».
   * Consigli:
   * <ul>
   * <li> Dire se l'eccezione rappresenta una condizione di errore oppure 
   *      una casistica eccezionale applicativa
   * <li> Potrebbe essere meglio non dettagliare tanto la documentazione dell'
   *      eccezione quanto la documentazione delle clausole "throws" nei metodi
   *      che rilanciano effettivamente quest'eccezione
   * </ul>
   * @generated
   */
  «ENDPROTECT»
public class «name» extends 
	«IF this.exceptionType == typedef::CSIExceptionTypes::USER»UserException
	«ELSEIF this.exceptionType == typedef::CSIExceptionTypes::SYSTEM»SystemException
	«ELSEIF this.exceptionType == typedef::CSIExceptionTypes::UNRECOVERABLE»UnrecoverableException
	«ENDIF» {

    /**
     * il serial version UID di una eccezione csi &egrave; sempre "1" perch&egrave; le
     * eccezioni CSI non possono contenere features aggiuntive
	 * @generated
	 */
	static final long serialVersionUID = 1;
	
	/**
	 * @generated
	 */
	public «name»(String msg, String nestedExcClassName, String nestedExcMessage, String nestedExcStackTrace) {
		super(msg, nestedExcClassName, nestedExcMessage, nestedExcStackTrace);
	}

    /**
	 * @generated
	 */
	public «name»(String msg, String nestedExcClassName, String nestedExcMessage) {
		super(msg, nestedExcClassName, nestedExcMessage);
	}
    
    /**
	 * @generated
	 */
	public «name»(String msg, Throwable nested) {
		super(msg, nested);
	}

    /**
	 * @generated
	 */
	public «name»(String msg) {
		super(msg);		
	}
} 	
	«ENDFILE»
«ENDDEFINE»



«REM»
==========================================================================================================================
OS WORKFLOW FILES
==========================================================================================================================
«ENDREM»

«DEFINE svcflowFiles(SOABEModel model, String source) FOR ServiceDef»
	«EXPAND svcflowConfigFiles(model) FOR this»
	«FOREACH operations AS op»
		«EXPAND svcflowDefinitionFile(this, model, source) FOR op»
		«EXPAND svcflowHandlerFiles(this, model, source) FOR op»
	«ENDFOREACH»
«ENDDEFINE»


«REM»
OsWorkflow Configuration files
Genera i files per la configurazione di OsWorkflow, ovvero:
   - osworkflow.xml : file di configurazione generale di OsWorkflow
   - workflows.xml  : file di definizione dei workflow utilizzati
«ENDREM»
«DEFINE svcflowConfigFiles(SOABEModel model) FOR ServiceDef»

«REM»OsWorkflow Configuration file«ENDREM»
«FILE svcflowConfDirForService(this.codServizio, model)+"/osworkflow.xml"»<?xml version="1.0" encoding="UTF-8"?>
<osworkflow>
  <!-- corregge il bug di memory leak -->
  <persistence class="it.csi.svcflow.orchestrator.store.StatelessWorkflowEntryStore" />
  <factory class="com.opensymphony.workflow.loader.XMLWorkflowFactory">
    <property key="resource" value="workflows.xml" />
  </factory> 
</osworkflow>
«ENDFILE»

«REM»Workflows Configuration file: definisce tutti i workflow«ENDREM»
«FILE svcflowConfDirForService(this.codServizio, model)+"/workflows.xml"»
<workflows>
«FOREACH operations AS op»
	<workflow name="«removeSeparator(codServizio)+op.name.toFirstUpper()»" type="resource" location="«svcflowDefinitionFileName(op,this.codServizio)»" />
«ENDFOREACH»
  
</workflows>
«ENDFILE»

«REM»Workflow Configuration file (forse è un duplicato)«ENDREM»
«REM»«EXPAND svcflowDefinitionFile(this, model) FOREACH operations»«ENDREM»
«ENDDEFINE»


«REM»Genera il file xml di definizione di un singolo Workflow«ENDREM»
«DEFINE svcflowDefinitionFile(ServiceDef sd, SOABEModel model, String source) FOR Operation»
	«LET getServiceImpl(sd,model) AS impl-»
		«IF impl !=null-»
			«LET impl.serviceComponent AS sc»
				«LET impl.implCartridge AS crt»
					«IF crt==null || crt.metaType==ManualImplCartridge»
						«EXPAND template::manualimpl::javafiles::svcflowDefinitionFile(sd, model) FOR this»
					«ELSEIF crt!=null && crt.metaType==FlowModelImplCartridge»
						«EXPAND template::flowmodel::workflow::svcflowDefinitionFile(sd, model, source) FOR this»
					«ELSE»
						«ERROR "tipo di cartridge non gestita per implementazione "+impl»
					«ENDIF»
				«ENDLET-»
			«ENDLET-»
		«ELSE-»
			«ERROR "la definizione di servizio "+sd+" non ha implementazione"»		
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»


«REM»Genera gli Handler specifici di una orchestrazione«ENDREM»
«DEFINE svcflowHandlerFiles(ServiceDef sd, SOABEModel model, String source) FOR Operation»
	«LET getServiceImpl(sd,model) AS impl-»
		«IF impl !=null-»
			«LET impl.serviceComponent AS sc»
				«LET impl.implCartridge AS crt»
					«IF crt==null || crt.metaType==ManualImplCartridge»
						«REM»niente da fare in questo caso«ENDREM»
					«ELSEIF crt!=null && crt.metaType==FlowModelImplCartridge»
						«EXPAND template::flowmodel::handlerfiles::svcflowHandlerFiles(sd, model, source) FOR this»
					«ELSE»
						«ERROR "tipo di cartridge non gestita per implementazione "+impl»
					«ENDIF»
				«ENDLET-»
			«ENDLET-»
		«ELSE-»
			«ERROR "la definizione di servizio "+sd+" non ha implementazione"»		
		«ENDIF-»
	«ENDLET-»
«ENDDEFINE»
