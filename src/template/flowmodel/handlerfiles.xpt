«IMPORT servicegen»
«IMPORT servicedef»
«IMPORT typedef»
«IMPORT appresources»
«IMPORT svcorch»

«IMPORT template::javavalidator»

«EXTENSION template::ServicegenExtensions»
«EXTENSION template::flowmodel::FlowModelExtensions»

«DEFINE baseHandlers FOR SOABEModel»
	«EXPAND dataSlotHelper FOR this»
 
	«EXPAND startNodeBaseHandler FOR this»
	«EXPAND stopNodeBaseHandler FOR this»
	«EXPAND papdCallBaseHandler FOR this»
	«EXPAND wsCallBaseHandler FOR this»
	«EXPAND forEachBaseHandler FOR this»
	«EXPAND endLoopBaseHandler FOR this»
	«EXPAND checkCondBaseHandler FOR this»
	«EXPAND customTransformBaseHandler FOR this»
	«EXPAND declTransformBaseHandler FOR this»
«ENDDEFINE»

«DEFINE dataSlotHelper FOR SOABEModel»
«FILE dataSlotHelperFile()»package «baseHandlersPkg()»;

import com.opensymphony.module.propertyset.PropertySet;

/**
 * Classe di utilita' per la gestione dei data-slot all'interno del contesto di esecuzione 
 * di osworkflow.
 *
 */
public class DataSlotHelper {
	
public static Object getDataSlotValue(String name, PropertySet ps){
	return ps.getObject(name);
}

public static void setDataSlotValue(String name, Object val, PropertySet ps) {
		if (val!=null){
			ps.setObject(name, val);
		}
		else{
			ps.remove(name);
		}
}

public static Object initDataSlotValue(Class type){
	try {
		Object ris = type.newInstance();
		return ris;
	} catch (InstantiationException e) {
		throw new IllegalArgumentException("impossibile istanziare lo slot di tipo "+type+":"+e);
	} catch (IllegalAccessException e) {
		throw new IllegalArgumentException("impossibile istanziare lo slot di tipo "+type+":"+e);
	}
}

}

«ENDFILE»
«ENDDEFINE»

«DEFINE startNodeBaseHandler FOR SOABEModel»
«FILE startNodeBaseHandlerFile()»package «baseHandlersPkg()»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.FunctionProvider;
import com.opensymphony.workflow.WorkflowException;

import it.csi.svcflow.orchestrator.handler.*;

public abstract class «startNodeBaseHandlerClassName()» implements FunctionProvider {

   

    public void execute(Map transientVars, Map args, PropertySet ps)	throws WorkflowException {
		
		this.initFunctionHandler(transientVars,args,ps);
		
		this.eseguiFunctionHandler(transientVars,args,ps);
		
		this.releaseFunctionHandler(transientVars,args,ps);
	}

		
	private void initFunctionHandler(Map transientVars, Map args, PropertySet ps) throws WorkflowException {
		
		
	}
	
    private void releaseFunctionHandler(Map transientVars, Map args, PropertySet ps) throws WorkflowException {
	}
    
    
	public abstract void eseguiFunctionHandler(Map transientVars, Map args, PropertySet ps) throws  WorkflowException;
	
}

«ENDFILE»
«ENDDEFINE»

«DEFINE stopNodeBaseHandler FOR SOABEModel»
«FILE stopNodeBaseHandlerFile()»package «baseHandlersPkg()»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.FunctionProvider;
import com.opensymphony.workflow.WorkflowException;

import it.csi.svcflow.orchestrator.handler.*;

public abstract class «stopNodeBaseHandlerClassName()» implements FunctionProvider {

   

    public void execute(Map transientVars, Map args, PropertySet ps)	throws WorkflowException {
		
		this.initFunctionHandler(transientVars,args,ps);
		
		this.eseguiFunctionHandler(transientVars,args,ps);
		
		this.releaseFunctionHandler(transientVars,args,ps);
	}

		
	private void initFunctionHandler(Map transientVars, Map args, PropertySet ps) throws WorkflowException {
		
		
	}
	
    private void releaseFunctionHandler(Map transientVars, Map args, PropertySet ps) throws WorkflowException {
	}
    
    
	public abstract void eseguiFunctionHandler(Map transientVars, Map args, PropertySet ps) throws  WorkflowException;
	
}

«ENDFILE»
«ENDDEFINE»

«DEFINE papdCallBaseHandler FOR SOABEModel»
«FILE papdCallBaseHandlerFile()»package «baseHandlersPkg()»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.FunctionProvider;
import com.opensymphony.workflow.WorkflowException;

import it.csi.svcflow.orchestrator.handler.*;

public abstract class «papdCallBaseHandlerClassName()» implements FunctionProvider {

   

    public void execute(Map transientVars, Map args, PropertySet ps)	throws WorkflowException {
		
		this.initFunctionHandler(transientVars,args,ps);
		
		this.eseguiFunctionHandler(transientVars,args,ps);
		
		this.releaseFunctionHandler(transientVars,args,ps);
	}

		
	private void initFunctionHandler(Map transientVars, Map args, PropertySet ps) throws WorkflowException {
		
		
	}
	
    private void releaseFunctionHandler(Map transientVars, Map args, PropertySet ps) throws WorkflowException {
	}
    
    
	public abstract void eseguiFunctionHandler(Map transientVars, Map args, PropertySet ps) throws  WorkflowException;
	
}

«ENDFILE»
«ENDDEFINE»

«DEFINE wsCallBaseHandler FOR SOABEModel»
«FILE wsCallBaseHandlerFile()»package «baseHandlersPkg()»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.FunctionProvider;
import com.opensymphony.workflow.WorkflowException;

import it.csi.svcflow.orchestrator.handler.*;

public abstract class «wsCallBaseHandlerClassName()» implements FunctionProvider {

   

    public void execute(Map transientVars, Map args, PropertySet ps)	throws WorkflowException {
		
		this.initFunctionHandler(transientVars,args,ps);
		
		this.eseguiFunctionHandler(transientVars,args,ps);
		
		this.releaseFunctionHandler(transientVars,args,ps);
	}

		
	private void initFunctionHandler(Map transientVars, Map args, PropertySet ps) throws WorkflowException {
		
		
	}
	
    private void releaseFunctionHandler(Map transientVars, Map args, PropertySet ps) throws WorkflowException {
	}
    
    
	public abstract void eseguiFunctionHandler(Map transientVars, Map args, PropertySet ps) throws  WorkflowException;
	
}

«ENDFILE»
«ENDDEFINE»

«DEFINE forEachBaseHandler FOR SOABEModel»
«FILE forEachBaseHandlerFile()»package «baseHandlersPkg()»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.FunctionProvider;
import com.opensymphony.workflow.WorkflowException;

import it.csi.svcflow.orchestrator.handler.*;

public abstract class «forEachBaseHandlerClassName()» implements FunctionProvider {

   

    public void execute(Map transientVars, Map args, PropertySet ps)	throws WorkflowException {
		
		this.initFunctionHandler(transientVars,args,ps);
		
		this.eseguiFunctionHandler(transientVars,args,ps);
		
		this.releaseFunctionHandler(transientVars,args,ps);
	}

		
	private void initFunctionHandler(Map transientVars, Map args, PropertySet ps) throws WorkflowException {
		
		
	}
	
    private void releaseFunctionHandler(Map transientVars, Map args, PropertySet ps) throws WorkflowException {
	}
    
    
	public abstract void eseguiFunctionHandler(Map transientVars, Map args, PropertySet ps) throws  WorkflowException;
	
}

«ENDFILE»
«ENDDEFINE»


«DEFINE endLoopBaseHandler FOR SOABEModel»
«FILE endLoopBaseHandlerFile()»package «baseHandlersPkg()»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.FunctionProvider;
import com.opensymphony.workflow.WorkflowException;

import it.csi.svcflow.orchestrator.handler.*;

public abstract class «endLoopBaseHandlerClassName()» implements FunctionProvider {

   

    public void execute(Map transientVars, Map args, PropertySet ps)	throws WorkflowException {
		
		this.initFunctionHandler(transientVars,args,ps);
		
		this.eseguiFunctionHandler(transientVars,args,ps);
		
		this.releaseFunctionHandler(transientVars,args,ps);
	}

		
	private void initFunctionHandler(Map transientVars, Map args, PropertySet ps) throws WorkflowException {
		
		
	}
	
    private void releaseFunctionHandler(Map transientVars, Map args, PropertySet ps) throws WorkflowException {
	}
    
    
	public abstract void eseguiFunctionHandler(Map transientVars, Map args, PropertySet ps) throws  WorkflowException;
	
}

«ENDFILE»
«ENDDEFINE»


«DEFINE checkCondBaseHandler FOR SOABEModel»
«FILE checkCondBaseHandlerFile()»package «baseHandlersPkg()»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.FunctionProvider;
import com.opensymphony.workflow.WorkflowException;

import it.csi.svcflow.orchestrator.handler.*;

public abstract class «checkCondBaseHandlerClassName()» implements FunctionProvider {

   

    public void execute(Map transientVars, Map args, PropertySet ps)	throws WorkflowException {
		
		this.initFunctionHandler(transientVars,args,ps);
		
		this.eseguiFunctionHandler(transientVars,args,ps);
		
		this.releaseFunctionHandler(transientVars,args,ps);
	}

		
	private void initFunctionHandler(Map transientVars, Map args, PropertySet ps) throws WorkflowException {
		
		
	}
	
    private void releaseFunctionHandler(Map transientVars, Map args, PropertySet ps) throws WorkflowException {
	}
    
    
	public abstract void eseguiFunctionHandler(Map transientVars, Map args, PropertySet ps) throws  WorkflowException;
	
}

«ENDFILE»
«ENDDEFINE»

«DEFINE customTransformBaseHandler FOR SOABEModel»
«FILE customTransformBaseHandlerFile()»package «baseHandlersPkg()»;

import java.util.*;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.FunctionProvider;
import com.opensymphony.workflow.WorkflowException;

import it.csi.svcflow.orchestrator.handler.*;

/**
 * Classe base per la gestione delle trasformazioni custom (hand written). 
 */
public abstract class «customTransformBaseHandlerClassName()» implements FunctionProvider {

	protected String[] _inputSlotNames;
	protected Class [] _inputSlotTypes;
	protected String _outputSlotName;
	protected Class  _outputSlotType;
	protected boolean _initOutSlot = false;

	public «customTransformBaseHandlerClassName()»(
			String inSlotNames[], Class inSlotTypes[], String outSlotName,
			Class outSlotType, boolean initOutSlot) {
		_inputSlotNames = inSlotNames;
		_outputSlotName = outSlotName;
		_initOutSlot = initOutSlot;
		_inputSlotTypes = inSlotTypes;
		_outputSlotType = outSlotType;
	
	}

	public void execute(Map transientVars, Map args, PropertySet ps)
			throws WorkflowException {

		this.initFunctionHandler(transientVars, args, ps);

		this.eseguiFunctionHandler(transientVars, args, ps);

		this.releaseFunctionHandler(transientVars, args, ps);
	}

	protected void initFunctionHandler(Map transientVars, Map args, PropertySet ps)
			throws WorkflowException {
		if (_initOutSlot){
			Object oldVal = DataSlotHelper.getDataSlotValue(_outputSlotName, ps);
			if (oldVal != null){
				// l'oggetto e'gia' inizializzato
				throw new WorkflowException("si sta tentando di inizializzare il dataSlot ["+
						_outputSlotName+"] che però ha già un valore nel contesto di esecuzione");
			}
			else{
				try{
					Object newVal = DataSlotHelper.initDataSlotValue(_outputSlotType);
					DataSlotHelper.setDataSlotValue(_outputSlotName, newVal, ps);
				}
				catch(Exception e){
					throw new WorkflowException("Errore durante l'inizializzazione dello slot ["+
							_outputSlotName+"]:"+e);
				}
			}
		}
	}

	protected void releaseFunctionHandler(Map transientVars, Map args,
			PropertySet ps) throws WorkflowException {
	}

	public void eseguiFunctionHandler(Map transientVars, Map args,
			PropertySet ps) throws WorkflowException{
		Map<String, Object> inputs = new HashMap<String, Object>(); 
		for (int i = 0; i < _inputSlotNames.length; i++) {
			String currInSlotName = _inputSlotNames[i];
			Object currInSlotVal = ps.getObject(currInSlotName);
			inputs.put(currInSlotName, currInSlotVal);
		}
		Object outVal = getTransformedObject(inputs);
		DataSlotHelper.setDataSlotValue(_outputSlotName, outVal, ps);
	}
	
	/**
	 * Questo metodo deve essere ridefinito nelle sottoclassi specifiche con la logica 
	 * di trasformazione vera e propria.
	 *  
	 * @param inValues mappa contenente i valori dei dataSlot di input. Per trasformazioni
	 * incrementali anche il dataSlot di output può essere un dataSlot di input.
	 * @return l'oggetto trasformato, che verrà rimpiazzato al valore eventualmente precedente
	 * nel context.
	 */
	public abstract Object getTransformedObject(Map<String, Object> inValues);

}

«ENDFILE»
«ENDDEFINE»

«DEFINE declTransformBaseHandler FOR SOABEModel»
«FILE declTransformBaseHandlerFile()»package «baseHandlersPkg()»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.FunctionProvider;
import com.opensymphony.workflow.WorkflowException;

import it.csi.svcflow.orchestrator.handler.*;

public abstract class «declTransformBaseHandlerClassName()» extends «customTransformBaseHandlerClassName()» {

	public «declTransformBaseHandlerClassName()»(
			String[] inSlotNames, Class[] inSlotTypes, String outSlotName,
			Class outSlotType, boolean initOutSlot) {
		super(inSlotNames, inSlotTypes, outSlotName, outSlotType, initOutSlot);
	}   

	public abstract Object getTransformedObject(Map<String, Object> inputs);
	
}

«ENDFILE»
«ENDDEFINE»

«REM»crea gli handler relativi ad una singola orchestrazione«ENDREM»
«DEFINE svcflowHandlerFiles(ServiceDef sd, SOABEModel model) FOR Operation»
«LET findOrchestrationForOperation(sd, model) AS currentOrchModel»
«IF currentOrchModel!=null»
	«EXPAND svcflowHandlers(sd, model) FOR currentOrchModel»
«ELSE»
«ERROR "Inconsistenza: impossibile trovare l'orchestrazione relativa al servizio "+sd.codServizio+", op: "+this.name»
«ENDIF»
«ENDLET»
«ENDDEFINE»

«DEFINE svcflowHandlers(ServiceDef sd, SOABEModel model) FOR Orchestration»
	«EXPAND svcflowHandler(this, sd, model) FOREACH this.nodes.nodes»
«ENDDEFINE»

«DEFINE svcflowHandler(Orchestration orch, ServiceDef sd, SOABEModel model) FOR Node»
«ERROR "Tipo di nodo non gestito"»
«ENDDEFINE»

«DEFINE svcflowHandler(Orchestration orch, ServiceDef sd, SOABEModel model) FOR StartNode»
«FILE this.fullSpecificHandlerFile(orch.operation,model)»package «specificHandlersPkg(orch.operation,model)»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.WorkflowException;

import «baseHandlersPkg(model)».*;

public class «specificHandlerClassName()» extends «startNodeBaseHandlerClassName()»{
	@Override
	public void eseguiFunctionHandler(Map transientVars, Map args,
			PropertySet ps) throws WorkflowException {
		// TODO Auto-generated method stub
		
	}
}
«ENDFILE»
«ENDDEFINE»

«DEFINE svcflowHandler(Orchestration orch, ServiceDef sd, SOABEModel model) FOR StopNode»
«FILE this.fullSpecificHandlerFile(orch.operation,model)»package «specificHandlersPkg(orch.operation,model)»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.WorkflowException;

import «baseHandlersPkg(model)».*;

public class «specificHandlerClassName()» extends «stopNodeBaseHandlerClassName()»{
	@Override
	public void eseguiFunctionHandler(Map transientVars, Map args,
			PropertySet ps) throws WorkflowException {
		// TODO Auto-generated method stub
		
	}
}
«ENDFILE»
«ENDDEFINE»

«DEFINE svcflowHandler(Orchestration orch, ServiceDef sd, SOABEModel model) FOR PAPDCall»
«FILE this.fullSpecificHandlerFile(orch.operation,model)»package «specificHandlersPkg(orch.operation,model)»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.WorkflowException;

import «baseHandlersPkg(model)».*;

public class «specificHandlerClassName()» extends «papdCallBaseHandlerClassName()»{
	@Override
	public void eseguiFunctionHandler(Map transientVars, Map args,
			PropertySet ps) throws WorkflowException {
		// TODO Auto-generated method stub
		
	}
}
«ENDFILE»
«ENDDEFINE»

«DEFINE svcflowHandler(Orchestration orch, ServiceDef sd, SOABEModel model) FOR WSCall»
«FILE this.fullSpecificHandlerFile(orch.operation,model)»package «specificHandlersPkg(orch.operation,model)»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.WorkflowException;

import «baseHandlersPkg(model)».*;

public class «specificHandlerClassName()» extends «wsCallBaseHandlerClassName()»{
	@Override
	public void eseguiFunctionHandler(Map transientVars, Map args,
			PropertySet ps) throws WorkflowException {
		// TODO Auto-generated method stub
		
	}
}
«ENDFILE»
«ENDDEFINE»

«DEFINE svcflowHandler(Orchestration orch, ServiceDef sd, SOABEModel model) FOR CustomTransformation»
«FILE this.fullSpecificHandlerFile(orch.operation,model)»package «specificHandlersPkg(orch.operation,model)»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.WorkflowException;

import «baseHandlersPkg(model)».*;

public class «specificHandlerClassName()» extends «customTransformBaseHandlerClassName()»{

	public «specificHandlerClassName()»(String inSlotNames[],
			Class inSlotTypes[], String outSlotName, Class outSlotType,
			boolean initOutSlot) {
			super(inSlotNames, inSlotTypes, outSlotName, outSlotType, initOutSlot);
	}
	
	public Object getTransformedObject(Map<String, Object> inputs){
		
		Object outVal = inputs.get(_outputSlotName);
		«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(sd.codServizio+orch.operation.name+this.name+"customTXLogic")»
		/// inserire qui la logica di trasformazione
		«ENDPROTECT»
		return outVal;
	}
}
«ENDFILE»
«ENDDEFINE»

«DEFINE svcflowHandler(Orchestration orch, ServiceDef sd, SOABEModel model) FOR DeclarativeTransformation»
«FILE this.fullSpecificHandlerFile(orch.operation,model)»package «specificHandlersPkg(orch.operation,model)»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.WorkflowException;

import «baseHandlersPkg(model)».*;

public class «specificHandlerClassName()» extends «declTransformBaseHandlerClassName()»{

	public «specificHandlerClassName()»(String inSlotNames[],
			Class inSlotTypes[], String outSlotName, Class outSlotType,
			boolean initOutSlot) {
			super(inSlotNames, inSlotTypes, outSlotName, outSlotType, initOutSlot);
	}

	public Object getTransformedObject(Map<String, Object> inputs){
		
		///// TODO
		return null;
	}
}
«ENDFILE»
«ENDDEFINE»

«DEFINE svcflowHandler(Orchestration orch, ServiceDef sd, SOABEModel model) FOR ForEach»
«FILE this.fullSpecificHandlerFile(orch.operation,model)»package «specificHandlersPkg(orch.operation,model)»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.WorkflowException;

import «baseHandlersPkg(model)».*;

public class «specificHandlerClassName()» extends «forEachBaseHandlerClassName()»{
	@Override
	public void eseguiFunctionHandler(Map transientVars, Map args,
			PropertySet ps) throws WorkflowException {
		// TODO Auto-generated method stub
		
	}
}
«ENDFILE»
«ENDDEFINE»

«DEFINE svcflowHandler(Orchestration orch, ServiceDef sd, SOABEModel model) FOR EndLoop»
«FILE this.fullSpecificHandlerFile(orch.operation,model)»package «specificHandlersPkg(orch.operation,model)»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.WorkflowException;

import «baseHandlersPkg(model)».*;

public class «specificHandlerClassName()» extends «endLoopBaseHandlerClassName()»{
	@Override
	public void eseguiFunctionHandler(Map transientVars, Map args,
			PropertySet ps) throws WorkflowException {
		// TODO Auto-generated method stub
		
	}
}
«ENDFILE»
«ENDDEFINE»

«DEFINE svcflowHandler(Orchestration orch, ServiceDef sd, SOABEModel model) FOR CheckCondition»
«FILE this.fullSpecificHandlerFile(orch.operation,model)»package «specificHandlersPkg(orch.operation,model)»;

import java.util.Map;

import com.opensymphony.module.propertyset.PropertySet;
import com.opensymphony.workflow.WorkflowException;

import «baseHandlersPkg(model)».*;

public class «specificHandlerClassName()» extends «checkCondBaseHandlerClassName()»{
	@Override
	public void eseguiFunctionHandler(Map transientVars, Map args,
			PropertySet ps) throws WorkflowException {
		// TODO Auto-generated method stub
		
	}
}
«ENDFILE»
«ENDDEFINE»
