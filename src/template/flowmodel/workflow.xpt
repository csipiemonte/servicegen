«IMPORT servicegen»
«IMPORT servicedef»
«IMPORT typedef»
«IMPORT svcorch»
«IMPORT appresources»

«IMPORT template::javavalidator»

«EXTENSION template::ServicegenExtensions»
«EXTENSION template::flowmodel::FlowModelExtensions»

«DEFINE svcflowDefinitionFile(ServiceDef sd, SOABEModel model) FOR Operation»
	«FILE svcflowConfDirForService(sd.codServizio, model)+"/"+svcflowDefinitionFileName(this,sd.codServizio)»<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE workflow PUBLIC "-//OpenSymphony Group//DTD OSWorkflow 2.8//EN" "http://www.opensymphony.com/osworkflow/workflow_2_8.dtd">
<!-- definizione di workflow generata a partire dal modello dell'orchestrazione -->
<workflow>
	<initial-actions>
		<action id="0" name="Start Workflow">
			<results>
				<unconditional-result id="5" old-status="Finished"
					status="Queued" step="1" />
			</results>
		</action>
	</initial-actions>
	<steps>
		<step name="Inizio" id="1">
		<actions>
			<action name="vaiInFondo" id="100">
				<results>
					<unconditional-result old-status="Queued"
						status="Finished" step="100">
					</unconditional-result>
				</results>
			</action>
		</actions>
		</step>
		«LET findOrchestrationForOperation(sd, model) AS currOrch-»
			«IF currOrch!=null-»
				«EXPAND steps(sd, model) FOR currOrch-»
			«ELSE-»
				«ERROR "Modello inconsistente: impossibile trovare l'orchestrazioen per "+sd.codServizio+"."+this.name»
			«ENDIF-»
		«ENDLET-»
		<step name="Fine" id="9999"></step>
	</steps>
</workflow>
	«ENDFILE»
«ENDDEFINE»

«REM»
Inizia la creazione nel descrittore dei vari step.

«ENDREM»
«DEFINE steps(ServiceDef sd, SOABEModel model) FOR Orchestration-»
	«EXPAND step(this, sd, model) FOREACH nodes.nodes-»
«ENDDEFINE»

«DEFINE step(Orchestration orch, ServiceDef sd, SOABEModel model) FOR Node»
«ERROR "tipo di nodo "+this+"non gestito"»
«ENDDEFINE»

«DEFINE step(Orchestration orch, ServiceDef sd, SOABEModel model) FOR StartNode»
	<step name="«toCamel(name)»" id="«nodeID(orch)»">
		<actions>
			<action name="next" id="«"1"+(nodeID(orch))»">
				<pre-functions>
				    <function type="class">
						<arg name="class.name">«specificHandlerFQN(orch.operation, model)»</arg>	
						«LET (Orchestration)(((Nodes)(this.eContainer)).eContainer) AS enclosingOrch-»
						«FOREACH enclosingOrch.inputParamBindings.inputParams AS currBinding-»
						<arg name="input.binding.«enclosingOrch.inputParamBindings.inputParams.indexOf(currBinding)»">«currBinding.param.name»=«getDataSlotAttrName(currBinding.slot)»</arg>
						«ENDFOREACH-»
						«ENDLET-»
					</function>
				</pre-functions>
				<results>
					<unconditional-result old-status="Queued"
						status="Finished" step="«this.next.nodeID(orch)»">
					</unconditional-result>
				</results>
			</action>
		</actions>
	</step>
«ENDDEFINE»

«DEFINE step(Orchestration orch, ServiceDef sd, SOABEModel model) FOR StopNode»
	<step name="«toCamel(name)»" id="«nodeID(orch)»">
		<actions>
			<action name="next" id="«"1"+(nodeID(orch))»">
				<pre-functions>
				    <function type="class">
				    	<arg name="class.name">«specificHandlerFQN(orch.operation, model)»</arg>
						«LET (Orchestration)(((Nodes)(this.eContainer)).eContainer) AS enclosingOrch-»
						«IF enclosingOrch.returnSlot!=null-»
						<arg name="output.binding">«getDataSlotAttrName(enclosingOrch.returnSlot)»</arg>
						«ENDIF-»
						«ENDLET-»
					</function>
				</pre-functions>
				<results>
					<unconditional-result old-status="Queued"
						status="Finished" step="9999">
					</unconditional-result>
				</results>
			</action>
		</actions>
	</step>
«ENDDEFINE»

«DEFINE step(Orchestration orch, ServiceDef sd, SOABEModel model) FOR PAPDCall»
	<step name="«toCamel(name)»" id="«nodeID(orch)»">
		<actions>
			<action name="next" id="«"1"+(nodeID(orch))»">
				<pre-functions>
				    <function type="class">
						<arg name="class.name">«specificHandlerFQN(orch.operation, model)»</arg>	 	
						<arg name="selectorPD">«pdSelectorFileName((PDPAServiceConnector)(this.serviceConnector))»</arg>
								
						<arg name="servicePD">«pdEJBDefFileName((EJBPABinding)(this.serviceConnector.binding),this.serviceConnector.serviceDef)»</arg>
					</function>
				</pre-functions>
				<results>
					«FOREACH onException AS currExcHnd-»
					<result old-status="Queued"
						status="Finished" step="«currExcHnd.firstRecoveryNode.nodeID(orch)»">
						<conditions>
							<condition type="class">
  								<arg name="class.name">«excRaisedConditionFQN(model)»</arg>
  								<arg name="handled.exceptions">«FOREACH currExcHnd.handledException AS currExc SEPARATOR ","»«map2JavaTypeSDRelative(currExc)»«ENDFOREACH»</arg> 
  							</condition>
  						</conditions>
					</result>
					«ENDFOREACH-»
					<unconditional-result old-status="Queued"
						status="Finished" step="«this.next.nodeID(orch)»">
					</unconditional-result>
				</results>	
			</action>
		</actions>
	</step>
«ENDDEFINE»

«DEFINE step(Orchestration orch, ServiceDef sd, SOABEModel model) FOR WSCall»
	<step name="«toCamel(name)»" id="«nodeID(orch)»">
		<actions>
			<action name="next" id="«"1"+(nodeID(orch))»">
				<pre-functions>
				    <function type="class">
						<arg name="class.name">«specificHandlerFQN(orch.operation, model)»</arg>	
						<!--  	
						<arg name="selectorPD">gestionecittadini.properties</arg>
								
						<arg name="servicePD">defpd_gestionecittadini</arg>
					    <arg name="handleException">CittadinoNonTrovatoException</arg>
					    -->
					</function>
				</pre-functions>
				<results>
					<unconditional-result old-status="Queued"
						status="Finished" step="«this.next.nodeID(orch)»">
					</unconditional-result>
				</results>
			</action>
		</actions>
	</step>
«ENDDEFINE»

«DEFINE step(Orchestration orch, ServiceDef sd, SOABEModel model) FOR CheckCondition»
	<step name="«toCamel(name)»" id="«nodeID(orch)»">
		<actions>
			<action name="next" id="«"1"+(nodeID(orch))»">
				<pre-functions>
				    <function type="class">
						<arg name="class.name">«specificHandlerFQN(orch.operation, model)»</arg>	
					</function>
				</pre-functions>
				<results>
					<!-- se la condizione e' soddisfatta -->
					<result old-status="Queued"
						status="Finished" step="«this.thenNode.nodeID(orch)»">
						<conditions>
							<condition type="class">
  								<arg name="class.name">«lastConditionSatisfiedFQN(model)»</arg>
  							</condition>
  						</conditions>
					</result>
					<!-- se la condizione non e' soddisfatta -->
					<unconditional-result old-status="Queued"
						status="Finished" step="«this.elseNode.nodeID(orch)»">
					</unconditional-result>
				</results>
			</action>
		</actions>
	</step>
«ENDDEFINE»

«DEFINE step(Orchestration orch, ServiceDef sd, SOABEModel model) FOR ForEach»
	<step name="«toCamel(name)»" id="«nodeID(orch)»">
		<actions>
			<action name="next" id="«"1"+(nodeID(orch))»">
				<pre-functions>
				    <function type="class">
						<arg name="class.name">«specificHandlerFQN(orch.operation, model)»</arg>	
						<arg name="collection.slot.name">«getDataSlotAttrName(collection)»</arg>
						<arg name="item.slot.name">«getDataSlotAttrName(item)»</arg>
					</function>
				</pre-functions>
				<results>
					<result old-status="Queued"
						status="Finished" step="«this.firstLoopNode.nodeID(orch)»">
						<conditions>
							<condition type="class">
  								<arg name="class.name">«forEachConditionFQN(model)»</arg>
  								<arg name="collection.slot.name">«getDataSlotAttrName(collection)»</arg>
  								<arg name="for.each.branch">stay</arg> 
  							</condition>
  						</conditions>
					</result>
					<result old-status="Queued"
						status="Finished" step="«this.afterLoopNode.nodeID(orch)»">
						<conditions>
							<condition type="class">
  								<arg name="class.name">«forEachConditionFQN(model)»</arg>
  								<arg name="collection.slot.name">«getDataSlotAttrName(collection)»</arg>
  								<arg name="for.each.branch">exit</arg> 
  							</condition>
  						</conditions>
					</result>
					<unconditional-result old-status="Queued"
						status="Finished" step="«this.afterLoopNode.nodeID(orch)»">
					</unconditional-result>
				</results>
			</action>
		</actions>
	</step>
«ENDDEFINE»

«DEFINE step(Orchestration orch, ServiceDef sd, SOABEModel model) FOR CustomTransformation»
	<step name="«toCamel(name)»" id="«nodeID(orch)»">
		<actions>
			<action name="next" id="«"1"+(nodeID(orch))»">
				<pre-functions>
				    <function type="class">
						<arg name="class.name">
							«specificHandlerFQN(orch.operation, model)»
						</arg>	
						«EXPAND txSlotDecl FOR this»
					</function>
				</pre-functions>
				<results>
					<unconditional-result old-status="Queued"
						status="Finished" step="«this.next.nodeID(orch)»">
					</unconditional-result>
				</results>
			</action>
		</actions>
	</step>
«ENDDEFINE»

«DEFINE txSlotDecl FOR Transformation»
						<!-- configurazione degli input slot -->
						«IF input.size>0-»
						«FOREACH input AS currIn-»
						<arg name="input.slot.name.«input.indexOf(currIn)»">«getDataSlotAttrName(currIn)»</arg>
						<arg name="input.slot.class.«input.indexOf(currIn)»">«map2JavaTypeSDRelative(currIn.type)»</arg>
						«ENDFOREACH-»
						«ENDIF-»
						«IF output!=null-»
						<!-- configurazione dell'output slot -->
						<arg name="output.slot.name">«getDataSlotAttrName(output)»</arg>
						<arg name="output.slot.class">«map2JavaTypeSDRelative(output.type)»</arg>
						«IF initOutSlot-»
						<arg name="output.slot.init">true</arg>
						«ENDIF-»
						«ENDIF-»
«ENDDEFINE»

«DEFINE step(Orchestration orch, ServiceDef sd, SOABEModel model) FOR DeclarativeTransformation»
	<step name="«toCamel(name)»" id="«nodeID(orch)»">
		<actions>
			<action name="next" id="«"1"+(nodeID(orch))»">
				<pre-functions>
				    <function type="class">
						<arg name="class.name">
							«specificHandlerFQN(orch.operation, model)»
						</arg>	
						«EXPAND txSlotDecl FOR this»
					</function>
				</pre-functions>
				<results>
					<unconditional-result old-status="Queued"
						status="Finished" step="«this.next.nodeID(orch)»">
					</unconditional-result>
				</results>
			</action>
		</actions>
	</step>
«ENDDEFINE»

«DEFINE step(Orchestration orch, ServiceDef sd, SOABEModel model) FOR EndLoop»
	<step name="«toCamel(name)»" id="«nodeID(orch)»">
		<actions>
			<action name="next" id="«"1"+(nodeID(orch))»">
				<pre-functions>
				    <function type="class">
						<arg name="class.name">
							«specificHandlerFQN(orch.operation, model)»
						</arg>	
						<!--  	
						<arg name="selectorPD">gestionecittadini.properties</arg>
								
						<arg name="servicePD">defpd_gestionecittadini</arg>
					    <arg name="handleException">CittadinoNonTrovatoException</arg>
					    -->
					</function>
				</pre-functions>
				<results>
					<unconditional-result old-status="Queued"
						status="Finished" step="«this.loopHeadNode.nodeID(orch)»">
					</unconditional-result>
				</results>
			</action>
		</actions>
	</step>
«ENDDEFINE»

«DEFINE step(Orchestration orch, ServiceDef sd, SOABEModel model) FOR UserDefinedOpNode»
	<step name="«toCamel(name)»" id="«nodeID(orch)»">
		<actions>
			<action name="next" id="«"1"+(nodeID(orch))»">
				<pre-functions>
				    <function type="class">
						<arg name="class.name">
							«specificHandlerFQN(orch.operation, model)»
						</arg>	
						<!--  	
						<arg name="selectorPD">gestionecittadini.properties</arg>
								
						<arg name="servicePD">defpd_gestionecittadini</arg>
					    <arg name="handleException">CittadinoNonTrovatoException</arg>
					    -->
					</function>
				</pre-functions>
				<results>
					<unconditional-result old-status="Queued"
						status="Finished" step="«this.next.nodeID(orch)»">
					</unconditional-result>
				</results>
			</action>
		</actions>
	</step>
«ENDDEFINE»