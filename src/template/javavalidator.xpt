«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT servicegen»
«IMPORT servicedef»
«IMPORT typedef»

«EXTENSION template::ServicegenExtensions»

«DEFINE validatorFH (SOABEModel model) FOR ServiceDef»
«FILE fullServiceEJBClassesDir(codServizio, model)+"/"+serviceValidatorClassName(this)+".java"»
package «getFullServiceEJBPkg(this.codServizio,model)»;

import it.csi.csi.pfh.FHInfo;
import it.csi.csi.pfh.FHResult;
import it.csi.csi.pfh.FunctHandler;
import it.csi.csi.util.Param;
import it.csi.csi.util.log.Categories;
import it.csi.csi.util.log.Loggable;
import it.csi.csi.wrapper.CSIException;
import it.csi.csi.wrapper.ConfigException;
import it.csi.csi.wrapper.UnrecoverableException;

import java.util.Vector;
import org.apache.log4j.Logger;




/**
 * Permette di validare il valore presente in uno dei parametri a fronte di 
 * 
 * Se la validazione è OK il PFH non fa niente di specifico. Se invece la validazione
 * è KO il pfh inserisce nell'attributo eccezione una eccezione di tipo 
 * JValidationException.
 * @author 869
 * @generated
 */
public class «serviceValidatorClassName(this)» implements FunctHandler, Loggable {

	/**
     * @generated
     */
	private String _acn;
		
	/**
	 * skip.if.previous.error: true=> skippa se nei passi precedenti c'è stato un errore
	 * @generated
	 */
	public final static String PROP_SKIP_IF_PREVIOUS_ERROR="skip.if.previous.error";
	
	/**
	 * skip.invoke.if.failed: true=> imposta skipInvoke=true se l'esecuzione fallisce
	 * @generated
	 */
	public final static String PROP_SKIP_INVOKE_IF_FAILED="skip.invoke.if.failed";
	
	/**
     * @generated
     */
	private boolean mustSkip;
	
	/**
     * @generated
     */
	private boolean mustSkipInvokeIfFailed=false;
	

	/**
     * @generated
     */
	public String getAppContextName() {
		return _acn;
	}
	
	/**
     * @generated
     */
	public void setAppContextName(String acn) {
		_acn = acn;

	}

	/**
     * @generated
     */
	protected FHInfo _fhi = null;
    
    /**
     * @generated
     */
	public «serviceValidatorClassName(this)»(FHInfo fhi) {
		_fhi = fhi;
		Logger log=getLogger();
		log.debug("[«serviceValidatorClassName(this)»::«serviceValidatorClassName(this)»] - BEGIN");
		
		if (_fhi.getProps().getProperty(PROP_SKIP_IF_PREVIOUS_ERROR)!=null && _fhi.getProps().getProperty(PROP_SKIP_IF_PREVIOUS_ERROR).equals("true"))
			mustSkip = true;
		else
			mustSkip=false;
		
		if (_fhi.getProps().getProperty(PROP_SKIP_INVOKE_IF_FAILED)!=null && _fhi.getProps().getProperty(PROP_SKIP_INVOKE_IF_FAILED).equals("true"))
			mustSkipInvokeIfFailed = true;
		else
			mustSkipInvokeIfFailed=false;
		

		log.debug("[«serviceValidatorClassName(this)»::«serviceValidatorClassName(this)»] - END");
		
	}

    /**
     * @generated
     */
	FHResult markAborted(Exception e, FHResult fhr){
		Logger log= getLogger();
		if (CSIException.class.isAssignableFrom(e.getClass()))
			fhr.setException((CSIException)e);
		else
			fhr.setException(new UnrecoverableException("Errore nella validazione dell'input:"+e,e));
		// mustSkipInvoke?
		if (mustSkipInvokeIfFailed){
			log.debug("[«serviceValidatorClassName(this)»::markAborted] - skipInvoke -> true");
			fhr.setSkipInvoke(true);
		}
		return fhr;
	}
	
	/**
	 * @generated
	 */
	public FHResult doOnInvokeSynch(String method, Param[] params,
			FHResult prevRes, Hashtable bag, boolean inPreChain)
			throws CSIException {
		Logger log = getLogger();
		log.debug("[«serviceValidatorClassName(this)»::doOnInvokeSynch] - BEGIN");
		if(mustSkip){
			if (prevRes.getException()!=null){
				log.debug("[«serviceValidatorClassName(this)»::doOnInvokeSynch] - i passi precedenti hanno trovato un'eccezione ed è presente la direttiva must-skip.");
				return prevRes;
			}
		}
	    //////// inizio logica di validazione
	    boolean validInput = true;
	    java.util.Vector errorMessages = new java.util.Vector();
	    if (false)
	    	return null; // dummy
	    «FOREACH operations AS op»
	    else if(method.equals("«op.name»")){
	    	validInput = _validate_«op.name»(prevRes, errorMessages);
	    }
	    «ENDFOREACH»
	    ;
	    //////// fine logica di validazione
	    if (!validInput)
	      prevRes = markAborted( buildValidationException(errorMessages), prevRes);
	     	
        return prevRes;
		
	}
	
	«FOREACH operations AS op»
	«EXPAND operationValidation FOR op»
	«ENDFOREACH»
	
	/**
	 * @generated
	 */
	Exception buildValidationException(java.util.Vector errorMessages){
	  String msg = "Errore di validazione dell'input. Dettagli:";
	  java.util.Enumeration it = errorMessages.elements();
	  while(it.hasMoreElements()){
	  		String currMsg = (String)it.nextElement();
	  		msg+=currMsg+";"; 
	  }
	  return new Exception(msg);
	}
	
	/**
	 * @generated
	 */
	Object findParamValue(FHResult fhr, String name){
		Param [] currParams = fhr.getNewParams();
		//Object xmlSourceVal = null;
		if (currParams!=null && currParams.length>0){
			for (int i=0; i<currParams.length;i++){
				if (currParams[i].getName().equals(name)){
					return currParams[i].getValue();
				}
			}
			// se arrivo qui => non trovato
			return  markAborted(new IllegalArgumentException("«serviceValidatorClassName(this)»: impossibile trovare il parametro ("+name+")"), fhr);
			
		}	
				
		else{
			return  markAborted(new IllegalArgumentException("«serviceValidatorClassName(this)»: impossibile trovare il parametro ("+name+")"), fhr);
		}
	}
	
	/**
     * @generated
     */
	Logger getLogger(){
		return (Logger)Categories.getLogger(getAppContextName(), Categories.PFH+"."+_fhi.getName());
	}
	
    //// metodi di utilità per i constraints
    public static boolean checkMustBeNull(Object value, Param par, Vector messages){
      if(value == null)
      	return true;
      else{
        messages.add("Il parametro "+par.getName()+" non è stato valorizzato");
      	return false;
      }
    }
    
    public static boolean checkMustNotBeNull(Object value, Param par, Vector messages){
      if(value != null)
      	return true;
      else{
        messages.add("Il parametro "+par.getName()+" non deve essere valorizzato");
      	return false;
      }
    }	
}
«ENDFILE»
«ENDDEFINE»


«DEFINE operationValidation FOR Operation»
    /**
     * Validazione dei constraints (globali e di parametro) definiti per il metodo
     * «name»
     * @generated
     */
	private boolean _validate_«name»(FHResult fhr, java.util.Vector messages){
		// validazione dei singoli parametri dell'operazione
		boolean paramsValid = true;
		«FOREACH params.select(p|p.validator!=null) AS parToValidate»
		paramsValid &= _validate_param_«name»_«parToValidate.name»(findParamValue(fhr,"«parToValidate.name»"), fhr, messages);
		«ENDFOREACH»
		// validazione a livello di operazione
		boolean opValid = true;
		// TODO
		return paramsValid && opValid;
	};
	
	«FOREACH params.select(p|p.validator!=null) AS partoValidate»
	«EXPAND paramValidation(this) FOR partoValidate»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE paramValidation(Operation op) FOR Param»
	/**
	 * Validazione dei constraints definiti sul parametro «name» del metodo «op.name»
	 * @generated
	 */
	private boolean _validate_param_«op.name»_«name»(Object value, FHResult fhr, java.util.Vector messages){
		// TODO
		return true;
	}
«ENDDEFINE»

«DEFINE constraint(Operation op, Param par) FOR ANDParamConstraint»
    
«ENDDEFINE»

«DEFINE constraint(Operation op, Param par) FOR ORParamConstraint»
    
«ENDDEFINE»

«DEFINE constraint(Operation op, Param par) FOR NOTParamConstraint»
    
«ENDDEFINE»

«DEFINE constraint(Operation op, Param par) FOR ValueValorizationConstraint»
    «IF this.mustNotBeNull»
    (value!=null)
    «ELSE»
    (value==null)
    «ENDIF»
«ENDDEFINE»