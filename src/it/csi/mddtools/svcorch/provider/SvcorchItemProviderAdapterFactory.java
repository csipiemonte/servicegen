/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package it.csi.mddtools.svcorch.provider;

import it.csi.mddtools.svcorch.util.SvcorchAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SvcorchItemProviderAdapterFactory extends SvcorchAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SvcorchItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.Orchestration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrchestrationItemProvider orchestrationItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.Orchestration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrchestrationAdapter() {
		if (orchestrationItemProvider == null) {
			orchestrationItemProvider = new OrchestrationItemProvider(this);
		}

		return orchestrationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.StartNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StartNodeItemProvider startNodeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.StartNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartNodeAdapter() {
		if (startNodeItemProvider == null) {
			startNodeItemProvider = new StartNodeItemProvider(this);
		}

		return startNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.StopNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StopNodeItemProvider stopNodeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.StopNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStopNodeAdapter() {
		if (stopNodeItemProvider == null) {
			stopNodeItemProvider = new StopNodeItemProvider(this);
		}

		return stopNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.PAPDCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PAPDCallItemProvider papdCallItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.PAPDCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPAPDCallAdapter() {
		if (papdCallItemProvider == null) {
			papdCallItemProvider = new PAPDCallItemProvider(this);
		}

		return papdCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.WSCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WSCallItemProvider wsCallItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.WSCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWSCallAdapter() {
		if (wsCallItemProvider == null) {
			wsCallItemProvider = new WSCallItemProvider(this);
		}

		return wsCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.CustomTransformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomTransformationItemProvider customTransformationItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.CustomTransformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomTransformationAdapter() {
		if (customTransformationItemProvider == null) {
			customTransformationItemProvider = new CustomTransformationItemProvider(this);
		}

		return customTransformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.DeclarativeTransformation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarativeTransformationItemProvider declarativeTransformationItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.DeclarativeTransformation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarativeTransformationAdapter() {
		if (declarativeTransformationItemProvider == null) {
			declarativeTransformationItemProvider = new DeclarativeTransformationItemProvider(this);
		}

		return declarativeTransformationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.CheckCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CheckConditionItemProvider checkConditionItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.CheckCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCheckConditionAdapter() {
		if (checkConditionItemProvider == null) {
			checkConditionItemProvider = new CheckConditionItemProvider(this);
		}

		return checkConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.ForEach} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForEachItemProvider forEachItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.ForEach}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForEachAdapter() {
		if (forEachItemProvider == null) {
			forEachItemProvider = new ForEachItemProvider(this);
		}

		return forEachItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.DataSlot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSlotItemProvider dataSlotItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.DataSlot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSlotAdapter() {
		if (dataSlotItemProvider == null) {
			dataSlotItemProvider = new DataSlotItemProvider(this);
		}

		return dataSlotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.Nodes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodesItemProvider nodesItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.Nodes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodesAdapter() {
		if (nodesItemProvider == null) {
			nodesItemProvider = new NodesItemProvider(this);
		}

		return nodesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.DataSlots} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSlotsItemProvider dataSlotsItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.DataSlots}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSlotsAdapter() {
		if (dataSlotsItemProvider == null) {
			dataSlotsItemProvider = new DataSlotsItemProvider(this);
		}

		return dataSlotsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.ParamBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParamBindingItemProvider paramBindingItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.ParamBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParamBindingAdapter() {
		if (paramBindingItemProvider == null) {
			paramBindingItemProvider = new ParamBindingItemProvider(this);
		}

		return paramBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.ExceptionHandler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExceptionHandlerItemProvider exceptionHandlerItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.ExceptionHandler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExceptionHandlerAdapter() {
		if (exceptionHandlerItemProvider == null) {
			exceptionHandlerItemProvider = new ExceptionHandlerItemProvider(this);
		}

		return exceptionHandlerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.InputParamBindings} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputParamBindingsItemProvider inputParamBindingsItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.InputParamBindings}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputParamBindingsAdapter() {
		if (inputParamBindingsItemProvider == null) {
			inputParamBindingsItemProvider = new InputParamBindingsItemProvider(this);
		}

		return inputParamBindingsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.EndLoop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EndLoopItemProvider endLoopItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.EndLoop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndLoopAdapter() {
		if (endLoopItemProvider == null) {
			endLoopItemProvider = new EndLoopItemProvider(this);
		}

		return endLoopItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.UserDefinedOpNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserDefinedOpNodeItemProvider userDefinedOpNodeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.UserDefinedOpNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserDefinedOpNodeAdapter() {
		if (userDefinedOpNodeItemProvider == null) {
			userDefinedOpNodeItemProvider = new UserDefinedOpNodeItemProvider(this);
		}

		return userDefinedOpNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.ExceptionMappings} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExceptionMappingsItemProvider exceptionMappingsItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.ExceptionMappings}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExceptionMappingsAdapter() {
		if (exceptionMappingsItemProvider == null) {
			exceptionMappingsItemProvider = new ExceptionMappingsItemProvider(this);
		}

		return exceptionMappingsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.svcorch.ExceptionMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExceptionMappingItemProvider exceptionMappingItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.svcorch.ExceptionMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExceptionMappingAdapter() {
		if (exceptionMappingItemProvider == null) {
			exceptionMappingItemProvider = new ExceptionMappingItemProvider(this);
		}

		return exceptionMappingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (orchestrationItemProvider != null) orchestrationItemProvider.dispose();
		if (startNodeItemProvider != null) startNodeItemProvider.dispose();
		if (stopNodeItemProvider != null) stopNodeItemProvider.dispose();
		if (papdCallItemProvider != null) papdCallItemProvider.dispose();
		if (wsCallItemProvider != null) wsCallItemProvider.dispose();
		if (customTransformationItemProvider != null) customTransformationItemProvider.dispose();
		if (declarativeTransformationItemProvider != null) declarativeTransformationItemProvider.dispose();
		if (checkConditionItemProvider != null) checkConditionItemProvider.dispose();
		if (forEachItemProvider != null) forEachItemProvider.dispose();
		if (dataSlotItemProvider != null) dataSlotItemProvider.dispose();
		if (nodesItemProvider != null) nodesItemProvider.dispose();
		if (dataSlotsItemProvider != null) dataSlotsItemProvider.dispose();
		if (paramBindingItemProvider != null) paramBindingItemProvider.dispose();
		if (exceptionHandlerItemProvider != null) exceptionHandlerItemProvider.dispose();
		if (inputParamBindingsItemProvider != null) inputParamBindingsItemProvider.dispose();
		if (endLoopItemProvider != null) endLoopItemProvider.dispose();
		if (userDefinedOpNodeItemProvider != null) userDefinedOpNodeItemProvider.dispose();
		if (exceptionMappingsItemProvider != null) exceptionMappingsItemProvider.dispose();
		if (exceptionMappingItemProvider != null) exceptionMappingItemProvider.dispose();
	}

}
