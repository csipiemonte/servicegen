/**
 * <copyright>
 * (C) Copyright 2011 CSI-PIEMONTE;

 * Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;
 * Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.
 * E' possibile ottenere una copia della Licenza al seguente indirizzo:
 *
 * http://www.eupl.it/opensource/eupl-1-1
 *
 * Salvo diversamente indicato dalla legge applicabile o concordato per 
 * iscritto, il software distribuito secondo i termini della Licenza e' 
 * distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,
 * esplicite o implicite.
 * Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni
 * e le limitazioni secondo i termini della Licenza.
 * </copyright>
 *
 * $Id$
 */
package it.csi.mddtools.servicedef.provider;

import it.csi.mddtools.servicedef.util.ServicedefAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ServicedefItemProviderAdapterFactory extends ServicedefAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ServicedefItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.ServiceDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceDefItemProvider serviceDefItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.ServiceDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceDefAdapter() {
		if (serviceDefItemProvider == null) {
			serviceDefItemProvider = new ServiceDefItemProvider(this);
		}

		return serviceDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.EJBPABinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EJBPABindingItemProvider ejbpaBindingItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.EJBPABinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEJBPABindingAdapter() {
		if (ejbpaBindingItemProvider == null) {
			ejbpaBindingItemProvider = new EJBPABindingItemProvider(this);
		}

		return ejbpaBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.SOAPPABRBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SOAPPABRBindingItemProvider soappabrBindingItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.SOAPPABRBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSOAPPABRBindingAdapter() {
		if (soappabrBindingItemProvider == null) {
			soappabrBindingItemProvider = new SOAPPABRBindingItemProvider(this);
		}

		return soappabrBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.WSFADBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WSFADBindingItemProvider wsfadBindingItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.WSFADBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWSFADBindingAdapter() {
		if (wsfadBindingItemProvider == null) {
			wsfadBindingItemProvider = new WSFADBindingItemProvider(this);
		}

		return wsfadBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.Param} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParamItemProvider paramItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.Param}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParamAdapter() {
		if (paramItemProvider == null) {
			paramItemProvider = new ParamItemProvider(this);
		}

		return paramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.Types} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypesItemProvider typesItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.Types}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypesAdapter() {
		if (typesItemProvider == null) {
			typesItemProvider = new TypesItemProvider(this);
		}

		return typesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.BaseTypes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BaseTypesItemProvider baseTypesItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.BaseTypes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBaseTypesAdapter() {
		if (baseTypesItemProvider == null) {
			baseTypesItemProvider = new BaseTypesItemProvider(this);
		}

		return baseTypesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.Role} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleItemProvider roleItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.Role}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.InputValidator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputValidatorItemProvider inputValidatorItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.InputValidator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputValidatorAdapter() {
		if (inputValidatorItemProvider == null) {
			inputValidatorItemProvider = new InputValidatorItemProvider(this);
		}

		return inputValidatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.ParamValidator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParamValidatorItemProvider paramValidatorItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.ParamValidator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParamValidatorAdapter() {
		if (paramValidatorItemProvider == null) {
			paramValidatorItemProvider = new ParamValidatorItemProvider(this);
		}

		return paramValidatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.ValueValorizationConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueValorizationConstraintItemProvider valueValorizationConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.ValueValorizationConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueValorizationConstraintAdapter() {
		if (valueValorizationConstraintItemProvider == null) {
			valueValorizationConstraintItemProvider = new ValueValorizationConstraintItemProvider(this);
		}

		return valueValorizationConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.CustomConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomConstraintItemProvider customConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.CustomConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomConstraintAdapter() {
		if (customConstraintItemProvider == null) {
			customConstraintItemProvider = new CustomConstraintItemProvider(this);
		}

		return customConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.RelativeConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelativeConstraintItemProvider relativeConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.RelativeConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelativeConstraintAdapter() {
		if (relativeConstraintItemProvider == null) {
			relativeConstraintItemProvider = new RelativeConstraintItemProvider(this);
		}

		return relativeConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.SimpleParamCoinstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleParamCoinstraintItemProvider simpleParamCoinstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.SimpleParamCoinstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleParamCoinstraintAdapter() {
		if (simpleParamCoinstraintItemProvider == null) {
			simpleParamCoinstraintItemProvider = new SimpleParamCoinstraintItemProvider(this);
		}

		return simpleParamCoinstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.ANDParamConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ANDParamConstraintItemProvider andParamConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.ANDParamConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createANDParamConstraintAdapter() {
		if (andParamConstraintItemProvider == null) {
			andParamConstraintItemProvider = new ANDParamConstraintItemProvider(this);
		}

		return andParamConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.ORParamConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ORParamConstraintItemProvider orParamConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.ORParamConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createORParamConstraintAdapter() {
		if (orParamConstraintItemProvider == null) {
			orParamConstraintItemProvider = new ORParamConstraintItemProvider(this);
		}

		return orParamConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.NOTParamConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NOTParamConstraintItemProvider notParamConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.NOTParamConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNOTParamConstraintAdapter() {
		if (notParamConstraintItemProvider == null) {
			notParamConstraintItemProvider = new NOTParamConstraintItemProvider(this);
		}

		return notParamConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.ANDValueConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ANDValueConstraintItemProvider andValueConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.ANDValueConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createANDValueConstraintAdapter() {
		if (andValueConstraintItemProvider == null) {
			andValueConstraintItemProvider = new ANDValueConstraintItemProvider(this);
		}

		return andValueConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.ORValueConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ORValueConstraintItemProvider orValueConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.ORValueConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createORValueConstraintAdapter() {
		if (orValueConstraintItemProvider == null) {
			orValueConstraintItemProvider = new ORValueConstraintItemProvider(this);
		}

		return orValueConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.NOTValueConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NOTValueConstraintItemProvider notValueConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.NOTValueConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNOTValueConstraintAdapter() {
		if (notValueConstraintItemProvider == null) {
			notValueConstraintItemProvider = new NOTValueConstraintItemProvider(this);
		}

		return notValueConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.ContinuousRangeConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContinuousRangeConstraintItemProvider continuousRangeConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.ContinuousRangeConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContinuousRangeConstraintAdapter() {
		if (continuousRangeConstraintItemProvider == null) {
			continuousRangeConstraintItemProvider = new ContinuousRangeConstraintItemProvider(this);
		}

		return continuousRangeConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.DiscreteRangeConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiscreteRangeConstraintItemProvider discreteRangeConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.DiscreteRangeConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiscreteRangeConstraintAdapter() {
		if (discreteRangeConstraintItemProvider == null) {
			discreteRangeConstraintItemProvider = new DiscreteRangeConstraintItemProvider(this);
		}

		return discreteRangeConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.SimpleFeatureConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SimpleFeatureConstraintItemProvider simpleFeatureConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.SimpleFeatureConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSimpleFeatureConstraintAdapter() {
		if (simpleFeatureConstraintItemProvider == null) {
			simpleFeatureConstraintItemProvider = new SimpleFeatureConstraintItemProvider(this);
		}

		return simpleFeatureConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.ANDFeatureConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ANDFeatureConstraintItemProvider andFeatureConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.ANDFeatureConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createANDFeatureConstraintAdapter() {
		if (andFeatureConstraintItemProvider == null) {
			andFeatureConstraintItemProvider = new ANDFeatureConstraintItemProvider(this);
		}

		return andFeatureConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.ORFeatureConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ORFeatureConstraintItemProvider orFeatureConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.ORFeatureConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createORFeatureConstraintAdapter() {
		if (orFeatureConstraintItemProvider == null) {
			orFeatureConstraintItemProvider = new ORFeatureConstraintItemProvider(this);
		}

		return orFeatureConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.NOTFeatureConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NOTFeatureConstraintItemProvider notFeatureConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.NOTFeatureConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNOTFeatureConstraintAdapter() {
		if (notFeatureConstraintItemProvider == null) {
			notFeatureConstraintItemProvider = new NOTFeatureConstraintItemProvider(this);
		}

		return notFeatureConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.ServiceDefAnnotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceDefAnnotationItemProvider serviceDefAnnotationItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.ServiceDefAnnotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceDefAnnotationAdapter() {
		if (serviceDefAnnotationItemProvider == null) {
			serviceDefAnnotationItemProvider = new ServiceDefAnnotationItemProvider(this);
		}

		return serviceDefAnnotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicedef.SDAnnotationDetail} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SDAnnotationDetailItemProvider sdAnnotationDetailItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicedef.SDAnnotationDetail}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSDAnnotationDetailAdapter() {
		if (sdAnnotationDetailItemProvider == null) {
			sdAnnotationDetailItemProvider = new SDAnnotationDetailItemProvider(this);
		}

		return sdAnnotationDetailItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (serviceDefItemProvider != null) serviceDefItemProvider.dispose();
		if (ejbpaBindingItemProvider != null) ejbpaBindingItemProvider.dispose();
		if (soappabrBindingItemProvider != null) soappabrBindingItemProvider.dispose();
		if (wsfadBindingItemProvider != null) wsfadBindingItemProvider.dispose();
		if (operationItemProvider != null) operationItemProvider.dispose();
		if (paramItemProvider != null) paramItemProvider.dispose();
		if (typesItemProvider != null) typesItemProvider.dispose();
		if (baseTypesItemProvider != null) baseTypesItemProvider.dispose();
		if (roleItemProvider != null) roleItemProvider.dispose();
		if (inputValidatorItemProvider != null) inputValidatorItemProvider.dispose();
		if (paramValidatorItemProvider != null) paramValidatorItemProvider.dispose();
		if (valueValorizationConstraintItemProvider != null) valueValorizationConstraintItemProvider.dispose();
		if (customConstraintItemProvider != null) customConstraintItemProvider.dispose();
		if (relativeConstraintItemProvider != null) relativeConstraintItemProvider.dispose();
		if (simpleParamCoinstraintItemProvider != null) simpleParamCoinstraintItemProvider.dispose();
		if (andParamConstraintItemProvider != null) andParamConstraintItemProvider.dispose();
		if (orParamConstraintItemProvider != null) orParamConstraintItemProvider.dispose();
		if (notParamConstraintItemProvider != null) notParamConstraintItemProvider.dispose();
		if (andValueConstraintItemProvider != null) andValueConstraintItemProvider.dispose();
		if (orValueConstraintItemProvider != null) orValueConstraintItemProvider.dispose();
		if (notValueConstraintItemProvider != null) notValueConstraintItemProvider.dispose();
		if (continuousRangeConstraintItemProvider != null) continuousRangeConstraintItemProvider.dispose();
		if (discreteRangeConstraintItemProvider != null) discreteRangeConstraintItemProvider.dispose();
		if (simpleFeatureConstraintItemProvider != null) simpleFeatureConstraintItemProvider.dispose();
		if (andFeatureConstraintItemProvider != null) andFeatureConstraintItemProvider.dispose();
		if (orFeatureConstraintItemProvider != null) orFeatureConstraintItemProvider.dispose();
		if (notFeatureConstraintItemProvider != null) notFeatureConstraintItemProvider.dispose();
		if (serviceDefAnnotationItemProvider != null) serviceDefAnnotationItemProvider.dispose();
		if (sdAnnotationDetailItemProvider != null) sdAnnotationDetailItemProvider.dispose();
	}

}
