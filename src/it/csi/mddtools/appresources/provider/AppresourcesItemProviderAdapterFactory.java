/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package it.csi.mddtools.appresources.provider;

import it.csi.mddtools.appresources.util.AppresourcesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AppresourcesItemProviderAdapterFactory extends AppresourcesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AppresourcesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.appresources.PDPAServiceConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PDPAServiceConnectorItemProvider pdpaServiceConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.appresources.PDPAServiceConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPDPAServiceConnectorAdapter() {
		if (pdpaServiceConnectorItemProvider == null) {
			pdpaServiceConnectorItemProvider = new PDPAServiceConnectorItemProvider(this);
		}

		return pdpaServiceConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.appresources.FileSystemConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileSystemConnectorItemProvider fileSystemConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.appresources.FileSystemConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileSystemConnectorAdapter() {
		if (fileSystemConnectorItemProvider == null) {
			fileSystemConnectorItemProvider = new FileSystemConnectorItemProvider(this);
		}

		return fileSystemConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.appresources.JDBCDataSourceConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JDBCDataSourceConnectorItemProvider jdbcDataSourceConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.appresources.JDBCDataSourceConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJDBCDataSourceConnectorAdapter() {
		if (jdbcDataSourceConnectorItemProvider == null) {
			jdbcDataSourceConnectorItemProvider = new JDBCDataSourceConnectorItemProvider(this);
		}

		return jdbcDataSourceConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.appresources.LdapJndiConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LdapJndiConnectorItemProvider ldapJndiConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.appresources.LdapJndiConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLdapJndiConnectorAdapter() {
		if (ldapJndiConnectorItemProvider == null) {
			ldapJndiConnectorItemProvider = new LdapJndiConnectorItemProvider(this);
		}

		return ldapJndiConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.appresources.RPCWebServiceConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RPCWebServiceConnectorItemProvider rpcWebServiceConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.appresources.RPCWebServiceConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRPCWebServiceConnectorAdapter() {
		if (rpcWebServiceConnectorItemProvider == null) {
			rpcWebServiceConnectorItemProvider = new RPCWebServiceConnectorItemProvider(this);
		}

		return rpcWebServiceConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.appresources.ServiceSelector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceSelectorItemProvider serviceSelectorItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.appresources.ServiceSelector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceSelectorAdapter() {
		if (serviceSelectorItemProvider == null) {
			serviceSelectorItemProvider = new ServiceSelectorItemProvider(this);
		}

		return serviceSelectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.appresources.ResourceSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceSetItemProvider resourceSetItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.appresources.ResourceSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceSetAdapter() {
		if (resourceSetItemProvider == null) {
			resourceSetItemProvider = new ResourceSetItemProvider(this);
		}

		return resourceSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.appresources.RCAnnotation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RCAnnotationItemProvider rcAnnotationItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.appresources.RCAnnotation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRCAnnotationAdapter() {
		if (rcAnnotationItemProvider == null) {
			rcAnnotationItemProvider = new RCAnnotationItemProvider(this);
		}

		return rcAnnotationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.appresources.RCAnnotationDetail} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RCAnnotationDetailItemProvider rcAnnotationDetailItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.appresources.RCAnnotationDetail}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRCAnnotationDetailAdapter() {
		if (rcAnnotationDetailItemProvider == null) {
			rcAnnotationDetailItemProvider = new RCAnnotationDetailItemProvider(this);
		}

		return rcAnnotationDetailItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (pdpaServiceConnectorItemProvider != null) pdpaServiceConnectorItemProvider.dispose();
		if (fileSystemConnectorItemProvider != null) fileSystemConnectorItemProvider.dispose();
		if (jdbcDataSourceConnectorItemProvider != null) jdbcDataSourceConnectorItemProvider.dispose();
		if (ldapJndiConnectorItemProvider != null) ldapJndiConnectorItemProvider.dispose();
		if (rpcWebServiceConnectorItemProvider != null) rpcWebServiceConnectorItemProvider.dispose();
		if (serviceSelectorItemProvider != null) serviceSelectorItemProvider.dispose();
		if (resourceSetItemProvider != null) resourceSetItemProvider.dispose();
		if (rcAnnotationItemProvider != null) rcAnnotationItemProvider.dispose();
		if (rcAnnotationDetailItemProvider != null) rcAnnotationDetailItemProvider.dispose();
	}

}
