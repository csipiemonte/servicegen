/**
 * <copyright>
 * (C) Copyright 2011 CSI-PIEMONTE;

 * Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;
 * Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.
 * E' possibile ottenere una copia della Licenza al seguente indirizzo:
 *
 * http://www.eupl.it/opensource/eupl-1-1
 *
 * Salvo diversamente indicato dalla legge applicabile o concordato per 
 * iscritto, il software distribuito secondo i termini della Licenza e' 
 * distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,
 * esplicite o implicite.
 * Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni
 * e le limitazioni secondo i termini della Licenza.
 * </copyright>
 *
 * $Id$
 */
package it.csi.mddtools.servicegen.provider;

import it.csi.mddtools.servicegen.util.ServicegenAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ServicegenItemProviderAdapterFactory extends ServicegenAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ServicegenItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicegen.SOABEModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SOABEModelItemProvider soabeModelItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicegen.SOABEModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSOABEModelAdapter() {
		if (soabeModelItemProvider == null) {
			soabeModelItemProvider = new SOABEModelItemProvider(this);
		}

		return soabeModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicegen.BaseTypes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BaseTypesItemProvider baseTypesItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicegen.BaseTypes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBaseTypesAdapter() {
		if (baseTypesItemProvider == null) {
			baseTypesItemProvider = new BaseTypesItemProvider(this);
		}

		return baseTypesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicegen.ServiceImpl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceImplItemProvider serviceImplItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicegen.ServiceImpl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceImplAdapter() {
		if (serviceImplItemProvider == null) {
			serviceImplItemProvider = new ServiceImplItemProvider(this);
		}

		return serviceImplItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicegen.TargetPlatform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetPlatformItemProvider targetPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicegen.TargetPlatform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetPlatformAdapter() {
		if (targetPlatformItemProvider == null) {
			targetPlatformItemProvider = new TargetPlatformItemProvider(this);
		}

		return targetPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicegen.ResourceBasedSimpleSC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceBasedSimpleSCItemProvider resourceBasedSimpleSCItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicegen.ResourceBasedSimpleSC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceBasedSimpleSCAdapter() {
		if (resourceBasedSimpleSCItemProvider == null) {
			resourceBasedSimpleSCItemProvider = new ResourceBasedSimpleSCItemProvider(this);
		}

		return resourceBasedSimpleSCItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicegen.OrchestrationFlowCompositeSC} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrchestrationFlowCompositeSCItemProvider orchestrationFlowCompositeSCItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicegen.OrchestrationFlowCompositeSC}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrchestrationFlowCompositeSCAdapter() {
		if (orchestrationFlowCompositeSCItemProvider == null) {
			orchestrationFlowCompositeSCItemProvider = new OrchestrationFlowCompositeSCItemProvider(this);
		}

		return orchestrationFlowCompositeSCItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicegen.ManualImplCartridge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ManualImplCartridgeItemProvider manualImplCartridgeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicegen.ManualImplCartridge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createManualImplCartridgeAdapter() {
		if (manualImplCartridgeItemProvider == null) {
			manualImplCartridgeItemProvider = new ManualImplCartridgeItemProvider(this);
		}

		return manualImplCartridgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicegen.CustomTemplateBasedImplCartridge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomTemplateBasedImplCartridgeItemProvider customTemplateBasedImplCartridgeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicegen.CustomTemplateBasedImplCartridge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomTemplateBasedImplCartridgeAdapter() {
		if (customTemplateBasedImplCartridgeItemProvider == null) {
			customTemplateBasedImplCartridgeItemProvider = new CustomTemplateBasedImplCartridgeItemProvider(this);
		}

		return customTemplateBasedImplCartridgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.servicegen.FlowModelImplCartridge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowModelImplCartridgeItemProvider flowModelImplCartridgeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.servicegen.FlowModelImplCartridge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowModelImplCartridgeAdapter() {
		if (flowModelImplCartridgeItemProvider == null) {
			flowModelImplCartridgeItemProvider = new FlowModelImplCartridgeItemProvider(this);
		}

		return flowModelImplCartridgeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (soabeModelItemProvider != null) soabeModelItemProvider.dispose();
		if (baseTypesItemProvider != null) baseTypesItemProvider.dispose();
		if (serviceImplItemProvider != null) serviceImplItemProvider.dispose();
		if (targetPlatformItemProvider != null) targetPlatformItemProvider.dispose();
		if (resourceBasedSimpleSCItemProvider != null) resourceBasedSimpleSCItemProvider.dispose();
		if (orchestrationFlowCompositeSCItemProvider != null) orchestrationFlowCompositeSCItemProvider.dispose();
		if (manualImplCartridgeItemProvider != null) manualImplCartridgeItemProvider.dispose();
		if (customTemplateBasedImplCartridgeItemProvider != null) customTemplateBasedImplCartridgeItemProvider.dispose();
		if (flowModelImplCartridgeItemProvider != null) flowModelImplCartridgeItemProvider.dispose();
	}

}
