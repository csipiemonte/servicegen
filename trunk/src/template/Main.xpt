«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT servicegen»
«IMPORT servicedef»
«IMPORT typedef»
«IMPORT appresources»
«IMPORT template::configfiles»
«IMPORT template::papdconfigfiles»
«IMPORT papdconfigfiles»

«EXTENSION template::ServicegenExtensions»


«REM»Main Method (chiamato dal workflow OAW)«ENDREM»
«DEFINE main(boolean useExternalDaoBeans) FOR SOABEModel»
	«EXPAND main2(useExternalDaoBeans) FOR this»
«ENDDEFINE»

«DEFINE main2(boolean useExternalDaoBeans) FOR SOABEModel»
	«EXPAND main_prodotto(useExternalDaoBeans) FOR this»
«ENDDEFINE»
 
«DEFINE main_prodotto(boolean useExternalDaoBeans) FOR SOABEModel»
	«EXPAND svn_project(useExternalDaoBeans) FOR this»
«ENDDEFINE»



«REM»
REAL MAIN INTERNAL METHOD
Metodo centralizzato per la genarazione del progetto
«ENDREM»
«DEFINE svn_project(boolean useExternalDaoBeans) FOR SOABEModel»
	«LET codComponente AS svn_project_dir»
		«REM»
		per ogni componente è necessario creare la struttura del progetto SVN:
		- build.xml
		- build.properties
		- ivy
		- ivyconf
		- ... (altri files di configurazione del processo di build)
		«ENDREM»
		«EXPAND buildfiles::buildfile FOR this»
		«EXPAND buildfiles::buildproperties  FOR this»
		«EXPAND buildfiles::buildEnvProperties FOR this»
		«EXPAND buildfiles::ivyfiles FOR this»
		«EXPAND buildfiles::aboutfiles FOR this»

		«REM»
		poi è necessario configurare i componenti j2ee necessari per l'implementazione
		della platform CSI over J2EE:
		- per tutti:
			-- application.xml che contiene tutti i moduli (1 per binding in sostanza)
			-- weblogic-application.xml o jboss-app.xml (a seconda dell'AS utilizzato)
		- per ogni PA ejb:
			-- defpa.xml
			-- ejb-jar.xml
			-- weblogic-ejb-jar.xml o jboss.xml (a seconda dell'AS utilizzato)
			-- defpd-ejb.xml (da passare ai fruitori)
		- per ogni PABR
			-- web.xml
			-- tutti i file del template di applicazione (???)
			-- defpd-soap.xml (da passare ai fornitori)
			-- file di deploy bridge da inserire nell'autoinstaller servlet
		- per ogni WSFAD
			-- server-config.wsdd
			-- tutti i file del template di applicazione
			-- defpd-ejb.xml da includere nel pacchetto
		«ENDREM»

		«REM»File di configurazione dell'applicazione«ENDREM»
		«EXPAND j2eeconfigfiles::applicationfiles  FOR this»

		«REM»Ciclo su ciascun servizio e genero i files necessari«ENDREM»
		«LET getProvidedServices(this) AS services»
			«EXPAND configfiles::serviceFiles(this) FOREACH services»
			«EXPAND javafiles::serviceFiles(this) FOREACH services»
			«FOREACH services AS currsrv»
				«EXPAND javafiles::typedefs(this, currsrv.codServizio) FOR currsrv.types»
			«ENDFOREACH»
		«ENDLET»

		«REM»Il file log4j è unico per tutto il componente«ENDREM»
		«EXPAND configfiles::log4jfiles FOR this»

		«REM»Se c'e' almeno un servizio cooptrace enabled creo le config di log apposite«ENDREM»
		«IF serviceimplementations.select(srvimpl|srvimpl.provides.traceEnabled==true).size>0»
			«EXPAND papdconfigfiles::cooptracefiles FOR this»
		«ENDIF»

		«REM»se c'è almeno una cartridge FlowModelImpl creo le classi base degli handler«ENDREM»
		«IF serviceimplementations.select(si|si.implCartridge!=null && si.implCartridge.metaType==FlowModelImplCartridge).size>0»
			«EXPAND template::flowmodel::handlerfiles::baseHandlers("csi") FOR this»
		«ENDIF»

		«REM»files associati ai resource set«ENDREM»
		«FOREACH this.serviceimplementations AS currSrvImpl»
			«LET getAllResourceConnectors(currSrvImpl) AS allRC»
				«EXPAND template::resourceconnectorfiles::resourceConnectorFiles(currSrvImpl.provides, this) FOREACH allRC»
			«ENDLET»
			«IF currSrvImpl.implCartridge.metaType==ManualImplCartridge && ((ManualImplCartridge)(currSrvImpl.implCartridge)).useInjectedPojo -»
				«EXPAND template::configfiles::beanContextFile(this, useExternalDaoBeans) FOR (ManualImplCartridge)(currSrvImpl.implCartridge)»
				«EXPAND template::manualimpl::javafiles::springStartupFiles(this) FOR (ManualImplCartridge)(currSrvImpl.implCartridge)»
			«ENDIF-»
		«ENDFOREACH»

		«REM»Configurazione del registry«ENDREM»
		«REM»«EXPAND configfiles::registryDeployFile(svn_project_dir, codProd, verProd, this.targetPlatform) FOR this»«ENDREM»
		«EXPAND registryfiles::registryArtifacts(this.targetPlatform) FOR this»
	«ENDLET»
«ENDDEFINE»
